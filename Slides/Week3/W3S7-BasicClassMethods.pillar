{
	"title":"Class Methods"
}

${slide:title=Simply}$

- We just send messages to classes 
- Corresponding methods are looked up (exactly as with instance-based methods) and applied to classes



${slide:title=Examples}$

[[[
  Time now 
  > 10:44:16.10794 am
]]]
We send the message ==time== to the class ==Time==

[[[
  Date today
  > 29 July 2015
]]]
We send the message ==today== to the class ==Date==

${slide:title=Some More Examples}$

[[[
(FileLocator workingDirectory filesMatching: '*.jpg')
]]]

[[[
(ZnEasy getPng: 'http://pharo.org/web/files/pharo.png') 
	  asMorph openInWindow
]]]

[[[
(ZnServer startDefaultOn: 8080) 
  onRequestRespond: [ :request | 
  ZnResponse ok: (ZnEntity with: DateAndTime now printString) ]
]]]

${slide:title=Isn't simply natural?}$

- We just send messages to classes and they perform some actions
- Most of the time they create instances

${slide:title=Class Methods}$

- Class methods are (same as for instance-based methods):
-- public
-- virtual / late-bound
-- return the receiver by default

- They are just sent to classes

${slide:title=Class Methods are defined on Class Level}$

Note the Class Button pressed!

+>file://figures/ClassMethodDateToday.png|width=90+


${slide:title=Class Methods are defined on Class Level}$

+>file://figures/ClassMethodCounter.png|width=90+


${slide:title=Common mistake}$

[[[
  Counter >> withValue: anInteger
     self new value: anInteger
]]]

- ==Counter withValue: 10== returns the class itself ==Counter==

${slide:title=Why?}$

[[[
  Counter >> withValue: aString
     self new name: aString
]]]

- Since there is no explicit return the method return the receiver
- It is equivalent to the next one

[[[
  Counter >> withValue: anInteger
     self new value: anInteger
     ^ self
]]]

==self== here is the class ==Counter== (yes the receiver of the message)

${slide:title=Correct way}$

We should just return the instance we created

[[[
    Counter >> withValue: anInteger
       ^ self new value: anInteger
]]]


${slide:title=Summary}$

- Class methods are methods defined on classes
- No different than instance methods
- We send a message to a class, the corresponding method is looked up and applied to the class
- To define a class method with the browser you should edit the class side
