{
  "title":"Essence of Dispatch",
  "subtitle":"Taking Pharo Booleans as Example",
  "slidesid" : "W3S01"
}

${slide:title=Objectives}$

- Understanding of message passing (late binding)
-- the heart of OOP
-- more an OOP lecture than a Pharo one
- Insight at how beautiful Pharo's implementation is

${slide:title=Context: Booleans}$

In Pharo, Booleans have a superb implementation!

- ==&==, ==|==, ==not== (eager)
- ==or:==, ==and:== (lazy)
- ==ifTrue:ifFalse:==, ==ifFalse:ifTrue:==

${slide:title=Three Exercises}$

# Implement ==not== (Not)
# Implement ==|== (Or)
# What is the goal of these exercises?

${slide:title=Exercise 1: Implement not}$

- Propose an implementation of Not in a world where:
-- You have: ==true==, ==false==
-- You only have objects and messages
-- How would you implement the message ==not==?
[[[
   false not
   -> true

   true not
   -> false
]]]

${slide:title=Hint 1: No conditionals}$

The solution does not use conditionals (i.e., no ==if==)

${slide:title=Hint 2: With Three Classes}$

- The solution uses three classes:
-- ==Boolean== (abstract), ==True== and ==False==
- ==true== is the singleton instance of ==True==
- ==false== is the singleton instance of ==False==

${slide:title=Hint 2: Three Classes}$

+Boolean Hierarchy>file://figures/BooleanHiearchyAndInstances.png|width=75+

${slide:title=Hint 3: How do we express choice in OOP?}$

In OOP, choice is expressed 
- By defining classes with compatible methods
- By sending a message to an instance of such class


Example 
[[[
   x open
]]]

- ==x== can be a file, a window, a tool,... 
- the method is ""selected"" based on the ==x=='s class

${slide:title=Implementation of Not in two methods}$

[[[
False>>not
   "Negation -- answer true since the receiver is false."
   ^ true
]]]

[[[
True>>not
   "Negation -- answer false since the receiver is true."
   ^ false
]]]

${slide:title=Implementation Hierarchy}$

+Not implementation.>file://figures/BooleanHiearchyAndInstancesWithNotMethods.png|width=110+


${slide:title=Message Lookup is Choosing the Right Method}$

+Not implementation.>file://figures/BooleanHiearchyAndInstancesWithNotMethodsLookup.png|width=110+


${slide:title=Boolean Implementation}$

- ==Boolean== is abstract
- subclasses are ==True== and ==False== and implement
-- logical operations ==&==, ==not==
-- control structures ==and:==, ==or:==, ==ifTrue:==, ==ifFalse:==, ==ifTrue:ifFalse:==, ==ifFalse:ifTrue:==

[[[
Boolean>>not
   "Abstract method. Negation: Answer true if the receiver is false, answer false if the receiver is true."
   self subclassResponsibility
]]]

${slide:title=Behavior of Or}$

[[[
true | true -> true
true | false -> true
true | anything -> true
]]]

[[[
false | true -> true
false | false -> false
false | anything -> anything
]]]

${slide:title=Implementation of Or in Boolean}$

[[[
Boolean>>| aBoolean
   "Abstract method. Evaluating Or: Evaluate the argument.
   Answer true if either the receiver or the argument is true."
   self subclassResponsibility
]]]


${slide:title=Implementation of Or in class False}$

[[[
false | true -> true
false | false -> false
false | anything -> anything
]]]

[[[
False>> | aBoolean
   "Evaluating Or -- answer with the argument, aBoolean."
   ^ aBoolean
]]]

${slide:title=Implementation of Or in class True}$

[[[
true | true -> true
true | false -> true
true | anything -> true
]]]

[[[
True>> | aBoolean
   "Evaluating Or -- answer true since the receiver is true."
   ^ true
]]]

${slide:title=Real implementation of Or in class True}$

The object ==true== is the receiver of the message!
[[[
True>> | aBoolean
   "Evaluating disjunction (Or) -- answer true since the receiver is true."
   ^ true
]]]

So we can write it like the following:

[[[
True>> | aBoolean
   "Evaluating disjunction (Or) -- answer true since the receiver is true."
   ^ self
]]]

${slide:title=Or Implementation in Two Methods}$

+Boolean hierarchy and instances.>file://figures/BooleanHiearchyAndInstancesWithOrMethods.png|width=110+


${slide:title=Summary}$
- The solution to implement booleans' operations:
-- does NOT use conditionals (if)
-- let the receiver decides
- Do not ask, tell

% Local Variables:
% compile-command: "cd ../.. && ./compile.sh --to=Beamer Slides/Week3/C019SD-W3S01-Design-EssenceOfDispatchNot.pillar"
% End:
