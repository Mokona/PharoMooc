{
  "title":"Stream Overview",
    "slidesid" : "W3S10"
}

${slide:title=What You Will Learn}$

- What streams are?
- How to use them

${slide:title=Streams}$

- Iterate over a sequence of elements
-- e.g., collection, file, network
- Current position separates past from future

+file://figures/a_bcdeStef.png|width=100|label=fig:a_bcde+

${slide:title=API Overview}$

- Creating:
-- ==anObject readStream==
-- ==anObject writeStream==
-- ==Collection streamContents: [:stream | ... ]==
-- ==(Read/Write)Stream on: aCollection==
- Reading elements
-- ==next==
-- ==upTo: anObject==
-- ==upToEnd==
- Writing elements
-- ==nextPut: anElement==
-- ==nextPutAll: aCollection==

${slide:title=API Overview}$

[[[
| st |
st := ReadWriteStream on: (Array new: 6).
st nextPut: 1.
st nextPutAll: #(4 8 2 6 7).
st contents.
> #(1 4 8 2 6 7)

st reset.
st next.
> 1

st position: 3.
st next.
> 2

st := (1 2 5 3 7) readStream.
st next.
> 1
]]]

${slide:title=Adding Elements}$

- ==nexPut:==, ==nextPutAll:==

[[[
| st |
st := ReadWriteStream on: (Array new: 6).
st nextPut: 1.
st nextPutAll: #(4 8 2 6 7).
]]]



${slide:title=Nicer Creation API|label=api}$

[[[
| s |
s := WriteStream on: (String new: 16).
self printOn: s.
s contents
]]]

is equivalent to

[[[
String streamContents: [:s | self printOn: s]
]]]

${slide:title=Nicer Adding API}$

Some people prefer ==<<== to ==nextPutAll:==

[[[
XX>>printOn: aStream
   aStream
      print: self label;
      << '->';
      << (self value printStringLimitedTo: 50)
]]]

${slide:title=What You Should Know}$

- Streams offers a simple API. 
- Basis for many manipulation of collection of objects
- Basic API

% Local Variables:
% compile-command: "cd ../.. && ./compile.sh --to=Beamer Slides/Week3/C019SD-W3S10-Streams.pillar"
% End:
