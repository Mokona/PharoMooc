{
	"title":"Objects, Methods, and Messages",
	"slidesid" : "W3S02"
}



${slide:title=Not implementation in two methods}$

+Not implementation.>file://figures/BooleanHiearchyAndInstancesWithNotMethodsLookup.png|width=95+

${slide:title=Stepping Back}$
- Let the receiver decide
- Do not ask, tell

${slide:title=Ok So What?}$

- You will probably never implement ==Booleans== in the future
- So is it really that totally useless?
- What is the lesson to learn?



${slide:title=Message Sends Act as Case Statements}$

- Message sends act as case statements
- But with messages, the case statements is ""dynamic"" in the sense that it depends on the objects to which the message is sent

${slide:title=Sending a Message is Making a Choice}$

- Each time you send a message, the execution selects the right method depending on the class of the receiver
- Sending a message is a choice operator


${slide:title=Question}$

Could we have been able to implement the same implementation for Not in only one class?
- No
- NO
- NO

${slide:title=Classes Play Case Roles}$

- To activate the choice operator we must have choices = classes
- A class implements a case

${slide:title=A Class Hierarchy is a Skeleton for Dynamic Dispatch}$

Compare the solution with one class vs. a hierarchy
- Can execute just one case
- Just need one object of that class


+One single class vs. a nice hierarchy.>file://figures/Design-FatVsDispatch.png|width=80+


${slide:title=Advantages of Class Hierarchy}$

+One single class vs. a nice hierarchy.>file://figures/Design-FatVsDispatchWithPackages.png|width=100+

- The hierarchy provides a way to specialize behavior
- You only focus on one class at a time
- More modular: Package different classes in different packages


${slide:title=Let the Receiver Decide}$

- Sending a message lets the receiver decide
- The client does not have to decide
- Client code is more declarative (give orders)
- Different receivers may be substitued dynamically

${slide:title=Avoid Conditionals}$

- Use objects and messages, when you can
- The execution engine acts as a conditional switch: Use it!
- Check the AntiIfCampaign

${slide:title=Cornerstone of OOP}$
- Let the receiver decide
- Message sends act as potential dynamic conditional
- Class hierarchy builds a skeleton for dynamic dispatch
- Avoid conditionals
