{
	"title":"Iterators",
	"subtitle":"",
	"author":"Stephane Ducasse",
	"complement":"http://stephane.ducasse.free.fr/ \\\\ stephane.ducasse@inria.fr"
}

${toc:depthLevel=2|level=0|highlight=0|title=Summary}$

%Les sections ne sont pas des titres de slide mais définnissent la structure du doucment. Il est possible de rajouter "renderStructureAsSlide":false dans pillar.conf pour ne pas créer de slide à partir d'un titre.

${slide:title=License|label=license}$

+>file://figures/CreativeCommons.png|width=50|label=figCreativeCommons+


! Introduction

%
${toc:depthLevel=1|level=0|highlight=1}$

${slide:title=Objectives|label=objectives}$

- Understand iterators
- Offer an overview

${slide:title=Pharo code is Compact!}$

[[[
ArrayList<String> strings = new ArrayList<String>();
   for(Person person: persons)
            strings.add(person.name()); 
]]]

[[[
strings := persons collect [ :person | person name ]
]]]

- Yes in Java 8.0 it will be finally simpler.
- But it is like that in Pharo since day one!
- Iterators are deep into the core of the language.


${slide:title= A first iterator: ==collect:==}$

[[[
	#(2 -3 4 -35 4) collect: [ :each | each abs ]
]]]

[[[
	#(2 3 4 35 4)
]]]
- Apply the block to each element and return a polymorphic collection with the results


${slide:title=Another collect: example}$

[[[
	#(16 11 68 19) collect: [ :i | i odd ]
]]]

[[[
	#(true false true false)
]]]




${slide:title=Choose your camp!}$

[[[
	#(16 11 68 19) collect: [ :i | i odd ]
]]]

We can also do it that way!	
[[[
	| result |
	aCol :=  #(16 11 68 19).
	result := aCol species new: aCol size.
	1 to: aCollection size do: 
		[ :each | result at: each put: (aCol at: each) odd].
	result
]]]



${slide:title=Basic Iterators Overview}$

- ==do:== (iterate)
- ==collect:== (iterate and collect results)
- ==select:== (select matching elements)
- ==reject:== (reject matching elements)
- ==detect:== (get first elements matching)
- ==detect:ifNone:==
- ==includes:== (test inclusion)
- and a lot more...


${slide:title=do:}$
 
- Iterates on each elements
- Applies an anynoumous method on each elements

[[[
	#(16 11 68 19) do:  
		[ :i | Transcript show: i ; cr ]
]]]

+Results of do: >file://figures/Iterators-Transcript.png|width=50|label=Iterators-Transcript+


${slide:title=select:}$

- Select some elements

[[[
	#(16 11 68 19) select: [ :i | i odd ] 
]]]


${slide:title=select:}$

- Select some elements

[[[
	#(16 11 68 19) select: [ :i | i odd ] 
]]]

[[[
	#(11 19)
]]]

${slide:title=With unary messages no block needed}$

When a block with a single argument is expected, we can pass an unary message selector
[[[
	#(16 11 68 19) select: [ :i | i odd ] 
]]]

is equivalent to

[[[
	#(16 11 68 19) select: #odd
]]]


${slide:title=reject:}$

- Filter some elements

[[[
#(16 11 68 19) reject:  [ :i | i odd ]
]]]


${slide:title=reject:}$

- Filter some elements

[[[
#(16 11 68 19) reject:  [ :i | i odd ]
]]]

[[[
#(16 68)
]]]


${slide:title=detect:}$

- First element that matches

[[[
#(16 11 68 19) detect:  [ :i | i odd ]   
]]]

${slide:title=detect:}$

- First element that matches

[[[
#(16 11 68 19) detect:  [ :i | i odd ]   
]]]

[[[
11
]]]



${slide:title=detect:ifNone:}$

- First element that matches else return a value

[[[
	#(16 12 68 20) detect:  [ :i | i odd ] ifNone: [ 0 ] 
]]]



${slide:title=detect:ifNone:}$

- First element that matches else return a value

[[[
	#(16 12 68 20) detect:  [ :i | i odd ] ifNone: [ 0 ] 
]]]

[[[
	0
]]]

${slide:title=Some other iterators}$

- ==anySatisfy:==
- ==allSatisfy:==
- ==reverseDo:==
- ==doWithIndex:==
- ==pairsDo:==
- ==permutationsDo:==
- ==reduceLeft:==
- ==reduceRight:==

Propose some expressions to illustrate their uses



${slide:title=Exciting ones}$

- how to produce =='a, b, c'== from ==#('a' 'b' 'c')==?
- Use ==doSeparatedBy:==

[[[
	String streamContents: [ :s |
				#('a' 'b' 'c') 
					do: [ :each | s << each ]
					separatedBy: [ s << ', ']
				] 
]]]


${slide:title=Iterating two structures}$

[[[
#(1 2 3) 
    with:  #(10 20 30)
    do: [ :x :y | Transcript show: (y * x) ; cr ]
]]]

+Results of with:do: >file://figures/Iterator-WithDo-Transcript.png|width=50|label=Iterator-WithDo-Transcript+

- ==with:do:== requires two structures of the same length.

${slide:title=Grouping}$

- ==groupedBy:==

[[[
#(1 2 3 4 5 6 7 ) groupedBy: #even 
]]]

[[[
a PluggableDictionary(false->#(1 3 5 7) true->#(2 4 6) )
]]]


${slide:title=Flattening results}$

- How to remove one level of nesting in a collection?
- Use ==flatCollect:==
[[[
#( #(1 2) #(3) #(4) #(5 #(6 7 3))) collect: [ :each | each ]  
-> #(#(1 2) #(3) #(4) #(5 #(6 7 3)))
]]]

[[[
#( #(1 2) #(3) #(4) #(5 #(6 7 3))) flatCollect: [ :each | each ] 

-> #(1 2 3 4 5 #(6 7 3))
]]]

${slide:title=Opening the box}$

- How ==do:== is implemented?
[[[
SequenceableCollection>>do: aBlock  
	"Evaluate aBlock with each of the receiver's elements as the argument."

	1 to: self size do: [:i | aBlock value: (self at: i)]		
]]]


${slide:title=Analysis}$

- Iterators are really powerful because they support polymorphic code.
- All the collections support them.
- New ones are defined.
- Missing controlled navigation as in the Iterator design pattern.


${slide:title=Summary}$
-- Iterators are your best friends
- Simple and powerful