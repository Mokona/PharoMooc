{
	"title":"Key Syntax Points for Java Programmers",
	"subtitle":"",
	"author":"Stephane Ducasse",
	"complement":"http://stephane.ducasse.free.fr/ \\\\ stephane.ducasse@inria.fr"
}

${toc:depthLevel=2|level=0|highlight=0|title=Summary}$

%Les sections ne sont pas des titres de slide mais définnissent la structure du doucment. Il est possible de rajouter "renderStructureAsSlide":false dans pillar.conf pour ne pas créer de slide à partir d'un titre.

${slide:title=License|label=license}$

+>file://figures/CreativeCommons.png|width=50|label=figCreativeCommons+





${slide:title=Only Objects and Messages|label=objectives}$

We only manipulate objects: mouse, booleans, arrays, numbers, compressed, strings, windows, scrollbars, canvas, files, trees, compilers, sound, url, socket, fonts, text, collections, stack, shortcut, streams, ...

and messages, messages, messages and messages





${slide:title=Three Kinds of Messages}$

- Unary
-- ==1 class==, ==Browser open== 

- Binary (operators like)
-- ==1+2==, ==x ~~ nil==

- Keyword-based: 
-- ==2 between: 0 and: 5==


${slide:title=Quiz}$

-- ==1 log==
-- ==Browser open== 
-- ==2 raisedTo: 5==
-- =='hello', 'world'==
-- ==10@20==
-- ==point1 x==
-- ==point1 distanceFrom: point2==





${slide:title=Quiz}$

We should have exercises here...



${slide:title=Keyword Messages for Javaists}$

[[[
postman.send(mail,recipient);
]]]

${slide:title=Keyword Messages for Javaists}$

[[[
postman . send ( mail , recipient );
]]]


${slide:title=Keyword Messages for Javaists}$

[[[
postman send mail recipient
]]]

${slide:title=Keyword Messages for Javaists}$

[[[
postman send mail to recipient
]]]

${slide:title=Keyword Messages for Javaists}$

[[[
postman send: mail to: recipient
]]]

- the message is ==send:to:== 
- it is send to postman 
- with two arguments: mail and recipient





${slide:title=Precedence}$

- Unary ==<== Binary ==<== Keyword 
- ==()== takes precedence

[[[
1 class maxVal + 1 
-> 1073741824
]]]

[[[
ZnEasy getPng: 'http://a.tile.openstreetmap.org/8/126/87.png' asZnUrl 
]]]


${slide:title=Quiz}$
Describe the order in which the messages are executed

-- ==(10@20 corner: 100@200) topCorner==
-- ==10@20 distanceFrom: 200@200==
-- ==2 \+ 3 raisedTo: 3 \+ 2==




${slide:title=Typical Interaction}$

+Inspecting (cmd and g)>file://figures/ZnEasyInGT.png|width=100|label=ZnEasyInGT+


${slide:title=Typical Interaction}$

+Interacting with an object>file://figures/ZnEasyInGT2.png|width=100|label=ZnEasyInGT2+

!! Some Basic Objects

${slide:title=Basic Objects}$

- String: =='a string'==
- Symbol (unique String): ==#aSymbol==
- Character: ==$A==
- Array: ==#(1 2 3)==
- OrderedCollection: ==OrderedCollection new add: 35; add: 45==
- Set: ==Set new add: 1; add: 2; yourself==


${slide:title=yourself}$

[[[
	Set new add: 1; add: 2; yourself
]]]

is equivalent to 

[[[
	| s |
	s := Set new.
	s add: 1; add: 2.
	s 
]]]

!! Block

${slide:title=Block: Anonymour Method}$

[[[
	[ :x | x + 2 ] value: 5
	-> 7
]]]

- blocks are anonymous method
- in other language: lexical closures
- == [] == delimits the block
- == :x == is block argument
- == x+2 == is the block body
- == value: == is a message that executes a block passing a value, here 5 as argument. 
- ==x== will have the value 5.

${slide:title=Blocks can be stored}$

A block can be stored into a variable, here ==b==. 

[[[
	| b |
	b := [ :x | x + 2 ].
	b value: 5
	-> 7
	b value: 33
	-> 35
]]]

- A block can be executed multiple times.

!! Conditionals

${slide:title=Conditionals: ==ifTrue:ifFalse:==}$
- Booleans are objects
- Conditionals are messages sent to booleans or block
- ==ifFalse:== and ==ifFalse:ifTrue:== 

[[[
	forceItalicOrOblique
		self slantValue = 0 ifTrue: [ slantValue := 1 ]
]]]

[[[
	initialAnswer := fullName isEmptyOrNil
		ifTrue: [ 'FirstnameLastname' translated ]
		ifFalse: [ fullName ].
]]]

${slide:title=ifTrue:ifFalse: other examples}$


[[[
	^ index = 0 
		ifFalse: [ values at: index ]
		ifTrue: [ self privateAt: key put: aBlock value ]
]]]

${slide:title=Conditionals: ifEmpty: ifNotEmpty:}$


[[[
	myProtocol 
		ifEmpty: [ 'As yet unclassified' ]
]]]

[[[
	self listItems 
		ifNotEmpty: [ :aList | 
			aList at: currentIndex  ]
]]]

When the receiver is not empty we get it as argument. 


!! Some Loops

${slide:title=Loops: timesRepeat:}$
[[[
	4 timesRepeat: [ self doSomething ]
]]]

[[[
	0 to: 100 [ :i | ... ]
]]]

[[[
	0 to: 100 by: 3 [ :i | ... ]
]]]

[[[
	aCol do: [:each | ... ]
]]]

${slide:title=Loops: do:}$

[[[
#(15 10 19 68) do:  
      [:i | Transcript show: i ; cr ]
]]]

${slide:title=Loops: collect:}$

[[[
	#(2 -3 4 -35 4) collect: [ :each| each abs]

]]]

[[[
	> #(2 3 4 35 4)	
]]]


${slide:title=One Method defined on class Point}$

[[[
(2@3) <= (5@6)
]]]

[[[
<= aPoint 
	"Answer whether the receiver is neither
	below nor to the right of aPoint."

	^ x <= aPoint x and: [y <= aPoint y]
]]]


${slide:title=Method definitions in books}$


[[[
Point>> <= aPoint 
	"Answer whether the receiver is neither
	below nor to the right of aPoint."

	^ x <= aPoint x and: [y <= aPoint y]
]]]

${slide:title=One Class Definition}$

[[[
Object subclass: #Point
	instanceVariableNames: 'x y'
	classVariableNames: ''
	category: 'Graphics-Primitives'
]]]

- Defines the class Point
- Inherits from Object
- Has two instance variables
- Packaged in Graphic-Primitives package



${slide:title=Summary}$
- Compact syntax
- Messages and closures
- Iterators