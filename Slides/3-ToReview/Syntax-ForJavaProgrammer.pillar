! Key Syntax Points for Java Programmers

Stephane Ducasse

*http://www.pharo.org*


!! Less is better :)

- No constructors
- No types declaration
- No interfaces
- No packages/private/protected
- No parametrized types
- No boxing/unboxing
- And still really powerful

!! Only Objects and Messages


mouse, booleans, arrays, numbers, compressed, strings, windows, scrollbars, canvas, files, trees, compilers, sound, url, socket, fonts, text, collections, stack, shortcut, streams,...

and 

messages messages messages and messages


!! Three Kinds
- Unary
-- ==1 class==, ==Browser open== Zinc

- Binary (operators like)
-- ==1+2==, ==x ~~ nil==

- Keyword-based: 
-- ==2 between: 0 and: 5==




!! Keyword Messages for Javaists

[[[
postman.send(mail,recipient);
]]]

!! Keyword Messages for Javaists

[[[
postman . send ( mail , recipient );
]]]


!! Keyword Messages for Javaists

[[[
postman send mail recipient
]]]

!! Keyword Messages for Javaists

[[[
postman send mail to recipient
]]]

!! Keyword Messages for Javaists

[[[
postman send: mail to: recipient
]]]

- the message is ==send:to:== 
- it is send to postman 
- with two arguments: mail and recipient

!! Precedence	

- Unary ==<== Binary ==<== Keyword 

[[[
1 class maxVal + 1 
-> 1073741824
]]]

[[[
ZnEasy getPng: 'http://a.tile.openstreetmap.org/8/126/87.png' asZnUrl 
]]]

- ==()== takes precedence


!! Typical message send expression
[[[
ZnEasy client
	url: 'http://bugs.pharo.org/issues/name/', text asString;
	get;
	response.
]]]



!! Typical interaction

+Inspecting (cmd and g)>file://figures/ZnEasyInGT.png|width=100|label=ZnEasyInGT+


!! Typical interaction

+Interacting with an object>file://figures/ZnEasyInGT2.png|width=100|label=ZnEasyInGT2+


!! Basic Objects

- String: =='a string'==
- Symbole (unique String): ==#aSymbol==
- Character: ==$A==
- Array: ==#(1 2 3)==
- OrderedCollection: ==OrderedCollection new add: 35; add: 45==
- Set: ==Set new add: 1; add: 2; yourself==

!! yourself

[[[
Set new add: 1; add: 2; yourself
]]]

is equivalent to 

[[[
	| s |
	s := Set new.
	s add: 1; add: 2.
	s 
]]]

!! Block: Lambda Expression

[[[
	[ :x | x + 2 ] value: 5
	-> 7
]]]

- blocks are anonymous method
- ==[]== delimits the block
- ==:x== is block argument
- ==x+2== is the block body
- ==value:== is a message that executes a block passing a value, here 5 as argument. ==x== will have the value 5.



!! Blocks can be stored

A block can be stored into a variable, here ==b==. 

[[[
	| b |
	b := [ :x | x + 2 ].
	b value: 5
	-> 7
	b value: 33
	-> 35
]]]

A block can be executed multiple times.

!! Conditionals: ==ifTrue:ifFalse:==
- Booleans are objects
- Conditional are messages sent to booleans or block

[[[
	forceItalicOrOblique
		self slantValue = 0 ifTrue: [ slantValue := 1 ]
]]]

[[[
	initialAnswer := fullName isEmptyOrNil
		ifTrue: ['FirstnameLastname' translated]
		ifFalse: [fullName].
]]]

!! ifFalse: and ifFalse:ifTrue:

[[[
	^ index = 0 
		ifFalse: [values at: index]
		ifTrue: [self privateAt: key put: aBlock value]
]]]


!! ifEmpty: ifNotEmpty:

[[[
(myProtocol 
	ifEmpty: ['As yet unclassified']
]]]

[[[
	self listItems 
		ifNotEmpty: [ :aList | 
			aList at: currentIndex  ]
]]]


!! Some Loops

[[[
	4 timesRepeat: [ self doSomething ]
]]]

[[[
	0 to: 100 [ :i | ... ]
]]]

[[[
	0 to: 100 by: 3 [ :i | ... ]
]]]

[[[
	aCol do: [:each | ... ]
]]]

!! do:

[[[
#(15 10 19 68) do:  
      [:i | Transcript show: i ; cr ]
]]]

!! collect:

[[[
	#(2 -3 4 -35 4) collect: [ :each| each abs]
--> #(2 3 4 35 4)
]]]



!! One Method defined on class Point

[[[
(2@3) <= (5@6)
]]]

[[[
<= aPoint 
	"Answer whether the receiver is neither
	below nor to the right of aPoint."

	^ x <= aPoint x and: [y <= aPoint y]
]]]

!! Method definitions in books

[[[
Point>> <= aPoint 
	"Answer whether the receiver is neither
	below nor to the right of aPoint."

	^ x <= aPoint x and: [y <= aPoint y]
]]]

!! One Class Definition

[[[
Object subclass: #Point
	instanceVariableNames: 'x y'
	classVariableNames: ''
	category: 'Graphics-Primitives'
]]]

- Defines the class Point
- Inherits from Object
- Has two instance variables
- Packaged in Graphic-Primitives package



!! Conclusion

- Compact syntax
- Messages and closures
- Iterators