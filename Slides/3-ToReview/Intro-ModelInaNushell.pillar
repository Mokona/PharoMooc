{
	"title":"Pharo Object Model in a Nutshell",
	"subtitle":"Elegance and Simplicity",
	"author":"Stéphane Ducasse and Damien Cassou",
	"complement":"http://stephane.ducasse.free.fr/ \\\\ stephane.ducasse@inria.fr"
}

${toc:depthLevel=2|level=0|highlight=0|title=Summary}$

%Les sections ne sont pas des titres de slide mais définnissent la structure du doucment. Il est possible de rajouter "renderStructureAsSlide":false dans pillar.conf pour ne pas créer de slide à partir d'un titre.

${slide:title=Less is really more :)|label=less}$

- No constructors
- No static method
- No type declaration
- No interfaces
- No packages/private/protected modifiers
- No parametrized types
- No boxing/unboxing
- And still really powerful :)


${slide:title=Only Objects and Messages|label=less}$

- Only objects: mouse, booleans, arrays, numbers, compressed, strings, windows, scrollbars, canvas, files, trees, compilers, sound, url, socket, fonts, text, collections, stack, shortcut, streams,...

- and messages sent to these objects.

${slide:title=Simple and uniform|label=uniform}$

- Everything is an object instance of a class
- Classes are objects too
- Only message passing
- Only one method lookup
-- Only late binding (virtual call)

${slide:title=Pharo Object Model|label=uniform}$

- Instance variables are private to the object (instance-based).
- Instance variables are protected.
- Shared variables between classes.
- Methods are public
- Single inheritance between classes


${slide:title=Class Definition|label=classdefinition}$

[[[
Object subclass: #Point
	instanceVariableNames: 'x y'
	classVariableNames: ''
	category: 'Graphics'
]]]

${slide:title=Method Definition|label=methoddefinition}$

- Normally defined in a browser or (by directly invoking the compiler)	 	
- Methods are public
- Always return self

[[[
Node>>accept: thePacket
	"If the packet is addressed to me, print it.
	Else just behave like a normal node"
		
	thePacket isAddressedTo: self)
		ifTrue: [ self print: thePacket ]
		ifFalse: [ super accept: thePacket ]
]]]

${slide:title=Instance Creation are Messages Too!|label=instanceCreation}$

- Messages sent to instance
[[[
	'1', 'abc'
	1@2
]]]	

- Basic class creation messages are ==new== and ==new:== sent to a class
[[[
	Monster new
	Array new: 6
]]]

- Class specific message creation (messages sent to classes)
[[[
	 Tomagoshi withHunger: 10
]]]


${slide:title=Summary|label=instanceCreation}$

- Everything is an object.
- We send messages to objects.
- Method selection is late bound.