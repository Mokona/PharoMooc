{
	"title":"Numbers",
	"subtitle":"",
	"author":"Stephane Ducasse",
	"complement":"http://stephane.ducasse.free.fr/ \\\\ stephane.ducasse@inria.fr"
}


${slide:title=Numbers|label=Outline}$

- SmallInteger, Integer,
-- 4, 2r100 (4 in base 2), 3r11 (4 in base 3), 1232
- Automatic coercion
-- == 1 + 2.3 -> 3.3==
- ==1 class== -> ==SmallInteger==
- ==1 class maxVal class== -> ==SmallInteger==
- ==(1 class maxVal + 1) class== -> ==LargeInteger==
-- Fraction, Float, Double
- 3/4, 2.4e7, 0.75d
-- ==(1/3) + (2/3)== -> 1 
- ==1000 factorial / 999 factorial== -> 1000
-- ==2/3 + 1== -> ==(5/3)==


${slide:title=Numbers|label=Outline}$

- SmallInteger, Integer,
-- 4, 2r100 (4 in base 2), 3r11 (4 in base 3), 1232
- Automatic coercion
-- == 1 + 2.3 -> 3.3==
- ==1 class== -> ==SmallInteger==
- ==1 class maxVal class== -> ==SmallInteger==
- ==(1 class maxVal + 1) class== -> ==LargeInteger==
-- Fraction, Float, Double
- 3/4, 2.4e7, 0.75d
-- ==(1/3) + (2/3)== -> 1 
- ==1000 factorial / 999 factorial== -> 1000
-- ==2/3 + 1== -> ==(5/3)==




${slide:title=Fun with SmallInteger|label=funsmallint}$

[[[
	1 class
	> SmallInteger
]]]

${slide:title=Fun with SmallInteger|label=funsmallint}$
what is the largest small integer?

[[[
	1 class maxVal
	> 1073741823
]]]

[[[
	1 class maxVal +1
	> 1073741824

	(1 class maxVal + 1) class
	> LargePositiveInteger
]]]







[[[
1000 factorial
4023872600770937735437024339230039857193748642107146325437999104299385123986290205920442084869694048004799
8861019719605863166687299480855890132382966994459099742450408707375991882362772718873251977950595099527612
0874975462497043601418278094646496291056393887437886487337119181045825783647849977012476632889835955735432
5131853239584630755574091142624174743493475534286465766116677973966688202912073791438537195882498081268678
3837455973174613608537953452422158659320192809087829730843139284440328123155861103697680135730421616874760
9675871348312025478589320767169132448426236131412508780208000261683151027341827977704784635868170164365024
1536913982812648102130927612448963599287051149649754199093422215668325720808213331861168115536158365469840
4670897560290095053761647584772842188967964624494516076535340819890138544248798495995331910172335555660213
9450399736280750137837615307127761926849034352625200015888535147331611702103968175921510907788019393178114
1945452572238655414610628921879602238389714760885062768629671466746975629112340824392081601537808898939645
1826324367161676217916890977991190375403127462228998800519544441428201218736174599264295658174662830295557
0299024324153181617210465832036786906117260158783520751516284225540265170483304226143974286933061690897968
4825901254583271682264580665267699586526822728070757813918581788896522081643483448259932660433676601769996
1283186078838615027946595513115655203609398818061213855860030143569452722420634463179746059468257310379008
4024432438465657245014402821885252470935190620929023136493273497565513958720559654228749774011413346962715
4228458623773875382304838656889764619273838149001407673104466402598994902222217659043399018860185665264850
6179970235619389701786004081188972991831102117122984590164192106888438712185564612496079872290851929681937
2388642614839657382291123125024186649353143970137428531926649875337218940694281434118520158014123344828015
0513996942901534830776445690990731524332782882698646027898643211390835062170950025973898635542771967428222
4875758676575234422020757363056949882508796892816275384886339690995982628095612145099487170124451646126037
9029309120889086942028510640182154399457156805941872748998094254742173582401063677404595741785160829230135
3580818400969963725242305608559037006242712434169090041536901059339838357779394109700277534720000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000
]]]

${slide:title=Fraction|label=Fraction}$


[[[
1000 factorial / 999 factorial
> 1000
]]]


${slide:title=Messages sent to objects|label=}$


[[[
	(1 / 3) + (2 / 3)
	>1
]]]

[[[
	2 / 3 + 1
	> 5 / 3
]]]

- Numbers are objects
- Mathematical operations are messages sent to objects


${slide:title=Number limits|label=Outline}$


- There is no notion of precedence

[[[
	2 * 3 + 5
	> 11
]]]

[[[
	2 + 3 * 5 
	> 25 !!!
]]]

- Use parenthesis to enforce precedence

[[[
	2 + (3 * 5)
	> 11
]]]


${slide:title=Points|label=points}$

- Points are created using the message ==@==

[[[

	10 @ 100
	(10 @ 100) x
	> 10
	(10 @ 100) y
	>100
]]]

${slide:title=Exercise|label=points}$

- Browse the implementation of ==@==

${slide:title=Rectangle|label=rectangle}$




${slide:title=Quiz|label=points}$

- 