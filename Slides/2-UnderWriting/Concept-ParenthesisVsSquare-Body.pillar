


! Parenthesis Vs. Square Brackets

%
${toc:depthLevel=1|level=0|highlight=1}$

${slide:title= () vs. []|label=really}$

- ==()== just changes the priority of an execution but the program is executed.
- ==[ ]== freezes the program execution. 

Therefore use ==[]== when you do not if your program will be executed.
When the message can change the execution of your program (if, while, ...) use a block.

[[[
	n timesRepeat: [ self doSomething ]
	10 timesRepeat: [ self doSomething ]
]]]

- ==timesRepeat:== executes a number of times its argument, therefore the argument is a block


${slide:title= () vs. [] Example|label=really}$


[[[
	x isNil ifTrue: [ self doSomething ]
]]]

- ==ifTrue:== may execute or not its argument, therefore the argument is a block


${slide:title= () vs. [] Example|label=really}$

[[[
	[ self start ] whileTrue: [ self doSomething ]
]]]

- ==whileTrue:== may execute both its receiver and argument multiple times, therefore they are both a block.



${slide:title= () vs. [] Example|label=really}$

[[[
	(x includes: 33) ifTrue: [ self doSomething ]
]]]

- We use ==( )== and not ==[]== for the receiver (==x includes: 33==) because this expression should be executed only once.
- we use ==( )== because we should make sure that the compiler identifies two messages: ==includes:== and ==ifTrue:== and not just one ==includes:ifTrue:==


${slide:title=Quiz|label=squareBracketQuiz}$

[[[
	1 to: 100 do: self doSomething
	-> 1 to: 100 do: [:i |  self doSomething ]
]]]

[[[
	x ifEmpty: self doSomething
	-> x ifEmpty: [ self doSomething ]
]]]

