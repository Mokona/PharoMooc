{
    "title":"Pharo Object Model in a Nutshell",
    "subtitle":"Elegance and Simplicity",
    "author":"StÃ©phane Ducasse, Damien Cassou, and Luc Fabresse",
    "complement":"http://www.pharo.org/"
}

${slide:title=Less is really more :)}$

- No constructors
- No static methods
- No type declarations
- No interfaces
- No packages/private/protected modifiers
- No parametrized types
- No boxing/unboxing
- still ''really'' powerful :)

${slide:title=Only Objects, Messages and Closures}$

- Only ''objects'': mouse pointer, booleans, arrays, numbers, strings, windows, scrollbars, canvas, files, trees, compilers, sound, url, socket, fonts, text, collections, stack, shortcut, streams...
- and ''messages'' sent to these objects.
- ''Closures'' are like anonymous methods.

${slide:title=Simple and Uniform}$

- ''everything'' is an object, instance of a class.
- Classes are objects too!
- All computation between objects is done via ''message passing''.
- There is only ONE method lookup for all objects:
-- Only late binding, only virtual calls
-- We use the term: ''sending a message''

${slide:title=Pharo Object Model}$

- Instance variables are private to the object (instance-based) but accessible from subclasses.
- Methods are public.
- Single inheritance between classes.

${slide:title=Class Definition}$

[[[
Object subclass: #Point
  instanceVariableNames: 'x y'
  classVariableNames: ''
  category: 'Graphics'
]]]

- The class ==Object== is asked to create the class ==Point==,
- with the instance variables ==x== and ==y==,
- in the  ==Graphics== package.

${slide:title=Messages}$

Computation between objects is done via message sends:

[[[
Margin>>expandRectangle: aRectangle
  "Answer a rectangle whose size has been expanded by the receiver which represents each rectangle corner."

  |  l r t b |
  l := aRectangle left - self left.
  r :=aRectangle right + self right.
  t := aRectangle top - self top.
  b := aRectangle bottom + self bottom.
  ^ Rectangle origin:  l @t extent: ((r - l ) @ (b - t ))
]]]

${slide:title=Method Definition}$

- Defined in a browser (or by invoking the compiler)
- Methods are public
- Methods are virtual (''i.e.,'' looked up at runtime)
- By default return ==self==

[[[
Node >> dist: aPoint
  "Answer the distance between aPoint and the receiver."
  | dx dy |
  dx := aPoint x - x.
  dy := aPoint y - y.
  ^ (dx * dx + (dy * dy)) sqrt
]]]

${slide:title=Instance-Creation with Messages}$

- Messages sent to an instance
[[[
  '1', 'abc'
  1@2
]]]

- Basic instance-creation messages are ==new== and ==new:== sent to a class
[[[
  Monster new
  Array new: 6
]]]

- Specific instance-creation message (sent to a class)
[[[
  Tomagoshi withHunger: 10
]]]

${slide:title=Summary}$

- Everything is an object.
- Messages are sent to objects.
- Methods are late bound.
- Instances are created by sending messages to other objects, or classes.

% Local Variables:
% compile-command: "cd ../.. && ./compile.sh --to=Beamer Slides/4-Done/Intro-ModelInaNushell.pillar"
% End:
