{
    "title":"Pharo Object Model in a Nutshell",
    "subtitle":"Elegance and Simplicity"
}



${slide:title=Only Objects, Messages ...}$

- Only ""objects"": mouse pointer, booleans, arrays, numbers, strings, windows, scrollbars, canvas, files, trees, compilers, sound, url, socket, fonts, text, collections, stack, shortcut, streams...
- and ""messages"" sent to these objects (==size==, ==\+==, ==at:put:==, ==do:==)

${slide:title=and Block Closures}$

- Messages are ""what"" (intent)
- Methods are ""how"" to do it
- Closures are kind of anonymous methods
- Closures are called ""block""-closures in Pharo

[[[
	4 timesRepeat: [ Transcript show: 'Hello World'] 
]]]

- ""[ ... ]"" delimits a block

${slide:title=A Simple and Uniform Model}$

- ""Everything"" is an object, instance of a class
- Classes are objects too!
- All computation between objects is done via ""message passing""
- There is only ONE method lookup for all objects:
-- Only late binding, only virtual calls
-- We use the term: ""sending a message"" to represent the fact that methods are looked up dynamically 

${slide:title=Pharo Object Model}$

- Instance variables are protected: 
-- private to the object
-- accessible from subclasses
- Methods are public and virtual bound
- Single inheritance between classes


${slide:title=Messages}$

Computation between objects is done via message sends:

The cross product of two points: 
[[[
    (pt1 x * pt2 y) - (pt1 y * pt2 x)
]]]


${slide:title=Object Creation}$

Using messages sent to another object

[[[
  'Pharo', ' is Cool'
> 'Pharo is Cool'
]]]

We concatenate two strings by sending the message ==,== to the string =='Pharo'== with the string ==' is Cool'== as argument

[[[
  10@20
]]]

The point ''p(10,20)'' is created by sending a message ==@== to the object 10 with the argument 20


${slide:title=Object Creation}$

Sending the messages ==new== and ==new:== to a class

[[[
  Monster new
  > aMonster
]]]

[[[
  Array new: 6
  > #( nil nil nil nil nil nil)
]]]

Here we get an array of size 6

${slide:title=Object Creation}$

Using specific instance-creation message sent to a class
and executing a class method (see later)

[[[
  Tomagoshi withHunger: 10
]]]



${slide:title=Less is More :)}$

- No constructors
- No static methods
- No type declarations
- No interfaces
- No packages/private/protected modifiers
- No parametrized types
- No boxing/unboxing
- still ''really'' powerful :)


${slide:title=Summary}$

- Everything is an object
- Computation is done via messages sent to objects
- Methods are late bound (looked up dynamically in the inheritance chain)
- Blocks are kind of anonymous methods
- Instances are created by sending messages to other objects, or classes

% Local Variables:
% compile-command: "cd ../.. && ./compile.sh --to=Beamer Slides/4-Done/Intro-ModelInaNushell.pillar"
% End:
