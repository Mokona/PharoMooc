{
    "title":"Messages: Composition and Precedence"
}


${slide:title=Composition: from left to right!}$

- Remember: (Msg) \> Unary \> Binary \> Keywords
- What happens when we have two messages of the same kind?
- From left to right
[[[language=Smalltalk
    1000 factorial class name  
    > LargePositiveInteger
]]]

is equivalent to 

[[[language=smalltalk
    (((1000 factorial) class) name) 
]]]

- Ease the composition of messages.


${slide:title=Back to Message Precedence}$

Remember that we have only messages

- (Msg) \> Unary \> Binary \> Keywords
- From left to right

${slide:title=Precedence Example}$

[[[language=Smalltalk
    2 + 3 squared
    > 2 + 9
    > 11
]]]

- unary (squared) first then binary (==+==)

${slide:title=Precedence Example}$

[[[language=Smalltalk
    2 raisedTo: 3 + 2
    > 2 raisedTo: 5
    > 32
]]]

- binary (==+==) first then keyword-based (==raisedTo:==)

${slide:title=Precedence Example}$

[[[language=Smalltalk
    Color gray - Color white = Color black
    > aGray - aWhite = aBlack
    > aBlack = aBlack
    > true
]]]

- Unary then binary from left to right

${slide:title=Precedence Example}$

[[[language=Smalltalk
    1 class maxVal + 1 
    > 1073741824
]]]

- unary, unary and binary

[[[language=Smalltalk
    1 class
    > SmallInteger

    1 class maxVal
    > 1073741823
	
    1 class maxVal + 1
    > 1073741824
	
    (1 class maxVal + 1) class
    > LargePositiveInteger
]]]


${slide:title=Getting the Pharo Logo|label=kids}$

[[[language=smalltalk
(ZnEasy getPng: 'http://pharo.org/web/files/pharo.png') 
    asMorph openInWindow.
]]]

- unary (==asZnUrl==), keyword (==getPng:==)
- then unary, unary


${slide:title=Parentheses take precedence!}$

[[[language=Smalltalk
    (0@0 extent: 100@100) bottomRight
    > (aPoint extent: anotherPoint) bottomRight
    > aRectangle bottomRight
    > 100@100
]]]

[[[language=Smalltalk
    0@0 extent: 100@100 bottomRight
    > Message not understood
    > 100 does not understand bottomRight
]]]

${slide:title=The price for simplicity}$

- Only messages: ==+== 
-- is a message, no precedence
-- can be redefined in domain classes 
- Simple
- One limit: no mathematical precedence

${slide:title=No mathematical precedence}$

[[[language=Smalltalk
    3 + 2 * 10
    > 5 * 10
    > 50
]]]

- should be rewritten using parentheses
[[[language=Smalltalk
    3 + (2 * 10)
    > 3 + 20
    > 23
]]]

${slide:title=No mathematical precedence}$

[[[language=Smalltalk
    1/3 + 2/3
    > 7/3 /3
    > 7/9
]]]
- should be rewritten using parentheses
[[[language=Smalltalk
    (1/3) + (2/3)
    > 1
]]]


${slide:title=Quiz}$

Describe the order in which the messages are executed

- ==(10@20 corner: 100@200) topCorner==
- ==10@20 distanceFrom: 200@200==
- ==2 \+ 3 raisedTo: 3 \+ 2==



${slide:title=Summary}$

- Three kinds of messages: unary, binary and keywords
- () > unary > binary > keywords
- There is no mathematical precedence because operation are plain messages
- Arguments are placed inside message structure: 
-- 2 between: 0 and: 5 (the message is ==between:and:==)
- ==()== takes precedence over messages
