{
	"title":"Advanced Points on Classes"
}

${slide:title=What You Will Learn}$

- How can I share state between instances of a class?
- How to initialize classes themselves?



${slide:title=Sharing State?}$


Sometimes one needs to share objects between instances of a class


- Use ""class variables"" (==classVariablesNames:==)

[[[
Object subclass: #Class
   instanceVariableNames: ''
   classVariableNames: 'ShareState'
   package: ''
]]]


${slide:title=Color Class Definition}$

[[[
Object subclass: #Color
   instanceVariableNames: 'rgb cachedDepth cachedBitPattern alpha'
   classVariableNames: 'BlueShift CachedColormaps ColorRegistry ComponentMask ComponentMax GrayToIndexMap GreenShift HalfComponentMask IndexedColors MaskingMap RedShift'
   package: 'Graphics-Primitives'
]]]


${slide:title=Color Class Definition}$

- Class variables are shared among all the instances and instances of subclasses
- They are shared! So it starts with an uppercase
- Class variables are accessible from class methods too

${slide:title=Class Variable Access}$

+>file://figures/ClassVariabeVsInstanceVariable.png+

toredo

${slide:title=Class Variable Access}$

+>file://figures/ClassVariableExemple.png+

toredo


${slide:title=Color Initialization}$

[[[
Color class >> initialize
   "Externally, the red, green, and blue components of color are floats in the range [0.0..1.0]. Internally, they are represented as integers in the range [0..ComponentMask] packing into a small integer to save space and to allow fast hashing and equality testing."
   ComponentMask := 1023.
   HalfComponentMask := 512. "used to round up in integer calculations"
   ComponentMax := 1023.0. "used to normalize components"
   RedShift := 20.
   GreenShift := 10.
   BlueShift := 0.
   self initializeIndexedColors.
   self initializeColorRegistry.
   self initializeGrayToIndexMap.
]]]	





${slide:title=Remember}$

- Everything is an object
- An object is initialized at creation time
- Classes are objects too
- How/When classes are initialized?



${slide:title=Classes are initialized}$

Classes are initialized 
- at load time when all their methods are loaded/compiled
- or explicitly by the programmer

[[[
Color initialize
]]]


${slide:title=Warning}$

- It is a bad practice to do a ==super initialize== in a class initialize method

- Because you may reinitialize (super) classes that should not be reinitialized


${slide:title=Class Instance Variables}$

- Like any object
- A class is an instance of a class (a metaclass) that can have instance variables that define the state of a class.

- When a metaclass defines a new instance variable, then its instance (a Class) gets a new value in addition to subclass, superclasses, methodDict...

${slide:title=Singleton Pattern}$

- A class has only one instance
- Keep the instance created in an instance variable

[[[
WebServer class
   instanceVariableNames: 'uniqueInstance'

WebServer class >> new
   self error: 'You should use uniqueInstance to get the unique instance'

WebServer class>>uniqueInstance
   ^ uniqueInstance ifNil: [ uniqueInstance := self basicNew initialize ].
]]]


${slide:title=Subclasses have Their Own Singleton}$

- With a ''class instance variable''
- Each subclass of WebServer will have its own singleton


${slide:title=Subclasses has Their Own Singleton}$


With a ClassVariable, there is only one singleton for the complete class hierarchy
Indeed ClassVariables are shared

[[[
Object subclass: #WebServer
   instanceVariableNames: ''
   classVariableNames: 'Singleton'
   package: ''
]]]

${slide:title=What You Should Know}$

- How to share objects between instances of a class?
- How to initialize class?
