{
	"title":"Advanced Points on Classes"
}

${slide:title=What you will learn}$

- How can I share state between all the instances of a class?
- How to initialize classes themselves?
- How to define variable size objects?


${slide:title=How to share state between all the instances of a class?}$

Need to share some constant or share complex objects?
- Use ""class variables""


${slide:title=Color class definition}$

[[[
Object subclass: #Color
   instanceVariableNames: 'rgb cachedDepth cachedBitPattern alpha'
   classVariableNames: 'BlueShift CachedColormaps ColorRegistry ComponentMask ComponentMax GrayToIndexMap GreenShift HalfComponentMask IndexedColors MaskingMap RedShift'
   package: 'Graphics-Primitives'
]]]

${slide:title=Color class definition}$
- Class variables are shared among all the instances and instances of subclasses
- Shared? So it starts with an uppercase
- Class variables are accessible from class methods too


${slide:title=Color class initialization}$

[[[
Color class >> initialize
	"Externally, the red, green, and blue components of color
	are floats in the range [0.0..1.0]. Internally, they are represented
	as integers in the range [0..ComponentMask] packing into a
	small integer to save space and to allow fast hashing and
	equality testing."
	ComponentMask := 1023.
	HalfComponentMask := 512.	"used to round up in integer calculations"
	ComponentMax := 1023.0.	"a Float used to normalize components"
	RedShift := 20.
	GreenShift := 10.
	BlueShift := 0.
	self initializeIndexedColors.
	self initializeColorRegistry.
	self initializeGrayToIndexMap.
]]]	




${slide:title=Remember}$

- Everything is an object
- An object is initialized at creation time
- Classes are objects too
- How/When classes are initialized

${slide:title=Classes are initialized}$

Classes are initialized 
- at load time when all their methods are compiled
- or explicitly by the programmer

[[[
ChronologyConstants initialize
]]]

${slide:title=What you will learn}$

[[[
ChronologyConstants >> initialize
	"ChronologyConstants initialize"
	SqueakEpoch := 2415386. 		"Julian day number of 1 Jan 1901" 
	SecondsInDay := 86400.
	MicrosecondsInDay := SecondsInDay * 1e6.
	SecondsInHour := 3600.
	SecondsInMinute := 60.
	NanosInSecond := 10 raisedTo: 9.
	NanosInMillisecond := 10 raisedTo: 6.
	DayNames := #(Sunday Monday Tuesday Wednesday Thursday Friday Saturday).
		
	MonthNames := #(January February March April May June July
 			August September October November December).
	DaysInMonth := #(31 28 31 30 31 30 31 31 30 31 30 31).
]]]

${slide:title=Warning}$

It is a bad practice to do a ==super initialize== in a class initialize method

Because you may reinitialize classes that should not be reinitialized

