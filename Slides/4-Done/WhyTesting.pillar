{
    "title":"Tests",
    "subtitle":"Why Testing is Important",
    "author":"St√©phane Ducasse and Damien Cassou",
    "complement":"http://stephane.ducasse.free.fr/ stephane.ducasse@inria.fr damien.cassou@inria.fr"
}

${slide:title=Goal}$

-why tests are important?
-what are their advantages?
-what are the techniques to write good tests?

${slide:title=Pros}$

-Finding problems
-Understanding code
-Increase trust

-Collateral pros

!Finding Problems

${slide:title=Finding Problems: Pros}$

-find bugs when they appear
-improve customer trust
-reproduce complex scenari
-check contracts of super types
-guarantee old bugs won't be back
-isolate the problem

${slide:title=Finding Problems: Characteristics of a Good ''Test Suite''}$

-check extreme cases (e.g., ==null==, 0 and empty)
-check complex cases (e.g., exceptions, network pbs)
-1 test for each bug (at least)
-good coverage
-check abstractions
-check units independently

!Understanding Code

${slide:title=Understanding Code}$

[[[language=smalltalk
convert
    | s |
    s := '#000000' copy.
    s at: 2 put: (Character digitValue: ((rgb bitShift: -6 - RedShift) bitAnd: 15)).
    s at: 3 put: (Character digitValue: ((rgb bitShift: -2 - RedShift) bitAnd: 15)).
    s at: 4 put: (Character digitValue: ((rgb bitShift: -6 - GreenShift) bitAnd: 15)).
    s at: 5 put: (Character digitValue: ((rgb bitShift: -2 - GreenShift) bitAnd: 15)).
    s at: 6 put: (Character digitValue: ((rgb bitShift: -6 - BlueShift) bitAnd: 15)).
    s at: 7 put: (Character digitValue: ((rgb bitShift: -2 - BlueShift) bitAnd: 15)).
    ^ s
]]]

${slide:title=Understanding Code}$

[[[language=smalltalk
testConvert
    self assert: Color white convert = '#FFFFFF'.
    self assert: Color red convert = '#FF0000'.
    self assert: Color black convert = '#000000'
]]]

${slide:title=Understanding Code}$

[[[language=smalltalk
testConvert2
    | table aColorString |
    table := #('0' '1' '2' '3' '4' '5' '6' '7' '8' '9' 'A' 'B' 'C' 'D' 'E' 'F').

    table do: [ :each |
        aColorString := '#', each, each, '0000'.
        self assert: ((Color fromString: aColorString) asHTMLColor sameAs: aColorString)].

    table do: [ :each |
        aColorString := '#', '00', each, each, '00'.
        self assert: ((Color fromString: aColorString) asHTMLColor sameAs: aColorString)].

    table do: [ :each |
        aColorString := '#', '0000', each, each.
        self assert: ((Color fromString: aColorString) asHTMLColor sameAs: aColorString)].

    table do: [ :each |
        aColorString := '#', each, each, each, each, each, each.
        self assert: ((Color fromString: aColorString) asHTMLColor sameAs: aColorString)].
]]]

${slide:title=Understanding Code}$

[[[language=smalltalk
testBitShift
    self assert: (2r11 bitShift: 2) equals: 2r1100.
    self assert: (2r1011 bitShift: -2) equals: 2r10.

testShiftOneLeftThenRight
    "Shift 1 bit left then right and test for 1"
    1 to: 100 do: [:i | self assert: ((1 bitShift: i) bitShift: i negated) = 1].
]]]

${slide:title=Understanding Code: Pros}$

-give simple and reproducible examples
-explain an API
-give up-to-date documentation
-check conformity of new code
-offer a first client to new code
-force a modular design

${slide:title=Understanding Code: Characteristics of a Good Test Suite}$

-Deterministic
-Automatic
-Self-explained
-Simple
-Unit

!Increasing Trust

${slide:title=Increasing Trust: Pros}$

-accelerate bug detection
-accelerate new code checking
-ease refactorings
-prevent regressions

${slide:title=Increasing Trust: Characteristics of a Good Test Suite}$

-change less frequently than the rest
-good code coverage
-deterministic

!Collateral Pros

${slide:title=Collateral Pros}$

-improve feeling of customers who care
-allow for automatic bug fixing
-improve type inference
-provide examples to variable values

!Test Writing Techniques

!!Testing Abstractions

${slide:title=Testing Abstractions}$

How do you test contracts of abstract types?

${slide:title=Testing Abstractions}$

How do you test that one and only one state is active at anytime?

+file://figures/tests-actions.png|width=50+

${slide:title=Testing Abstractions}$

+file://figures/tests-actions-abstract-classes.png|width=70+

[[[language=smalltalk
testOnlyOneValidStateAtEachMoment
  | action |
  action := self createAction.
  self assert: action isReady.
  self deny: action isInProgress. self deny: action isFinished.

  [ action isFinished ] whileFalse: [
    action doStep.
    self deny: action isReady.
    self assert: action isFinished = action isInProgress not ].

  self deny: action isReady. self deny: action isInProgress.
  self assert: action isFinished
]]]

${slide:title=Testing Abstractions}$

-parallel hierarchies
-test must put in the highest abstraction
-factory method

+file://figures/tests-actions-parallel-hierarchies.png|width=80+

!!Unit Testing through Mocking

${slide:title=Mocking}
