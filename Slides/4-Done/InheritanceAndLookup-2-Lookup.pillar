{
    "title":"Inheritance and Lookup",
    "subtitle":"2: Lookup",
    "author":"StÃ©phane Ducasse and Damien Cassou",
    "complement":"http://stephane.ducasse.free.fr/ stephane.ducasse@inria.fr damien.cassou@inria.fr"
}

${slide:title=Goal}$

-The algorithm mapping a message to a method
-==self== represents the receiver

${slide:title=Single Inheritance}$

- Static for the instance variables
--at class-definition time, the instance variables are collected from the superclasses and the class. No duplication of instance variables.
-Dynamic for the methods
--late binding (all virtual) methods are looked up at runtime depending on the dynamic type of the receiver.

${slide:title=Message Sending}$

Sending a message means ''looking up'' the method to execute in the class of the receiver and ''executing'' it on the receiver with the arguments.

Sending a message is a two-step process:
# look up the method whose name matches the message selector;
# execute this method on the receiver with the arguments.

Let's present step 1 now.

${slide:title=Method Lookup}$

The lookup starts in the ''class'' of the ''receiver'' then:
-if the method is defined in the class, it is returned;
-otherwise the search continues in the superclasses;
-when there is no more superclass... (explained later :-))


${slide:title=Method Lookup}$

+>file://figures/LookupEssence.png|width=55+

${slide:title=Some Lookup Cases}$

+>file://figures/LookupExemple.png|width=70+


${slide:title=Method Lookup Starts in the Receiver Class}$

+>file://figures/LookupWithSelfInSuperclassMethod.png|width=50+

[[[
    A new foo
    > ...
    B new foo
    > ...
]]]

${slide:title=Method Lookup Starts in the Receiver Class}$

+>file://figures/LookupWithSelfInSuperclassMethod.png|width=50+

[[[
    A new foo
    > 10
    B new foo
    > 50
]]]

${slide:title=What is self/this?}$

Take 5 min and write the definition of ==self== (==this== in Java).

- Your definition should have two points:
-- What does ==self== represent?
-- How are the methods looked up when a message is sent to ==self==?

${slide:title=self/this}$

- ==self== represents the receiver of the message
- ==self== in Pharo, ==this== in Java, C\#
- the method lookup starts in the class of the receiver

${slide:title=self represents the receiver}$

+>file://figures/LookupWithSelfInSuperclassMethod.png|width=50+

[[[
    A new bar
    > ...
    B new bar
    > ...
]]]

${slide:title=self represents the receiver}$

+>file://figures/LookupWithSelfInSuperclassMethod.png|width=50+

[[[
    A new bar
    > 10
    B new bar
    > 50             <-- discussed on the next slide
]]]


${slide:title=self represents the receiver}$

${columns}$

${column:width=35}$

+>file://figures/LookupWithSelfInSuperclassMethod.png|width=100+

${column:width=65}$

[[[
    B new bar
    > 50
]]]
#==aB bar==: no method ==bar== defined in ==B==
#look up in ==A== - the method ==bar== is found
#method ==bar== is executed on the receiver (==aB = B new==)
#==self== refers to ==aB==
#==foo== is sent to ==self==
#look up ==foo== in the receiver's class: ==B==!
#==foo== is found there and executed on ==aB==

${endColumns}$

${slide:title=self Always Represents the Receiver}$

+>file://figures/LookupWithSelfInSuperclassMethodThreeClasses.png|width=30+

[[[
    A new bar
    > ...
    B new bar
    > ...
    C new bar
    > ...
]]]

${slide:title=self Always Represents the Receiver}$

+>file://figures/LookupWithSelfInSuperclassMethodThreeClasses.png|width=30+

[[[
    A new bar
    > 10
    B new bar
    > 10
    C new bar
    > 50
]]]

${slide:title=What you should Know}$


-==self== represents the receiver
-Sending a message is a two-step process:
-#look up the method whose name matches the message selector;
-#execute this method on the receiver with the arguments.
