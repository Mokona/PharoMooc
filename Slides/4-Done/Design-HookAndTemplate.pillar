{
	"title":"Message sends are plans for reuse"
}

${slide:title=Remember...}$

- Message passing is a choice operator
- Class hierarchies define choices

+One single class vs. a nice hierarchy.>file://figures/Design-FatVsDispatch.png|width=60+

${slide:title=Pitch}$

- Superclass code can be reused by subclasses 
- Sending messages in a superclass define places where subclass code can be injected.


${slide:title=A first example}$


[[[language=smalltalk
    Node >> setWindowWithRatioForDisplay
        | averageRatio defaultNodeSize |
        averageRatio := 55.
        defaultNodeSize := mainCoordinate /maximiseViewRatio.
        self window add:
            (UINode new with: (bandWidth * averageRatio / defaultWindowSize).
        previousNodeSize := defaultNodeSize.
]]]

- What if we want to change the ==defaultNodeSize== definition in our subclass?


${slide:title=A not that good solution}$
- What if we cannot modify the code of ==Node== (developed by another company)?

- Duplicate the code in our subclass

[[[language=smalltalk
    OurSpecificNode >> setWindowWithRatioForDisplay
        | averageRatio defaultNodeSize |
        averageRatio := 55.
        defaultNodeSize := (mainCoordinate /maximiseViewRatio) + 10.
        self window add:
            (UINode new with: (bandWidth * averageRatio / defaultWindowSize).
        previousNodeSize := defaultNodeSize.
]]]

- Note that if ==setWindowWithRatioForDisplay== uses private attributes (Java like languages), copying the code in subclass will not work.
- Duplication is not a good practice:
-- copy bugs,
-- fragile when original code will change,
-- burden on us to keep the system running. 

${slide:title=Solution}$

- Define methods
- Send messages to invoke such methods
- Let subclasses customize such methods

+>file://figures/SelfIsDynamic.png|width=80+


${slide:title=Good design in the first place}$

[[[language=smalltalk
    Node>>setWindowWithRatioForDisplay
        | averageRatio defaultNodeSize |
        averageRatio := 55.
        defaultNodeSize := self ratio.
        self window add:
            (UINode new with: (bandWidth * averageRatio / defaultWindowSize).
        previousNodeSize := defaultNodeSize.
]]]
[[[language=smalltalk		
    Node>>ratio
        ^ mainCoordinate /maximiseViewRatio	
]]]


${slide:title=Subclass reuse superclass logic}$

Now the subclass can only express the delta and reuse the superclass logic
[[[language=smalltalk	
    OurSpecificNode>>ratio
         ^ super ratio + 10
]]]



${slide:title=Avoid magic numbers}$

- Do not hardcode magic numbers (55)
- Either define instance variables with setter and getter, and/or set default value via message semd

[[[language=smalltalk
    Node>>setWindowWithRatioForDisplay
        | averageRatio defaultNodeSize |
        averageRatio := 55.
        defaultNodeSize := self ratio.
        self window add:
            (UINode new with: (bandWidth * averageRatio / defaultWindowSize).
        previousNodeSize := defaultNodeSize.
]]]

${slide:title=Use Setter and Default}$

[[[language=smalltalk
    Node>>....
        self averageRatio: self defaultAverageRatio.

    Node>>defaultAverageRatio
        ^ 55
]]]

- With setter, clients may change the value without subclassing
[[[language=smalltalk
	aNode averageRatio: 55
]]]

${slide:title=Many small messages}$

- Newbies in Pharo complain that methods are too small
- This is a good properties

[[[language=smalltalk
	Node >> uiNode
		^ (UINode new with: (bandWidth * averageRatio / defaultWindowSize).
		
    Node >> setWindowWithRatioForDisplay
        | defaultNodeSize |
        self averageRatio: 55.
        defaultNodeSize := self ratio.
        self window add: self uiNode
]]]




${slide:title=Conclusion}$

- Each time you send a message you create a hook where the code of a subclass may be executed instead of yours.
- Prefer small methods over long ones because it forces you to create more methods, hence more hooks

