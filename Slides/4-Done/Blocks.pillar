{
	"title":"Introduction to Blocks"
}


${slide:title=Objectives}$

- Called closures or lexical closures in other languages.
- Just introduced in Java 8.0.
- Really important and are at the heart of Pharo.
- Used for loops, conditionals and iterators.
- You can define your own control flow.
- Used in UI development.
- Really powerful concept 

- As a first approximation, blocks are kind of anonymous methods


${slide:title=Block Syntax}$

- a block is delimited by ==[ ]==

[[[language=smalltalk
     [ expressions.... ]
]]]

${slide:title=A Block}$


- Executing ==(1 / 0)== raises an error.

[[[language=smalltalk
    ( 1 / 0 )
   -> Error
]]]

- Executing ==[ 1 / 0 ]== does not raise an error because the block body is not executed.

[[[language=smalltalk
    [ 1 / 0 ]
    > [ 1 /0 ] 
]]]

- If we do not ask a block to be executed, nothing happens.

${slide:title=A Block is Freezing Computation}$

- A block is not executed.
- A block blocks execution: its body is not executed.

[[[language=smalltalk
    [ 2 + 6 ] 
    > [ 2 + 6 ] 
]]]


${slide:title=Executing a Block}$

To execute a block we should ask ""explicitly"" its execution using the message ==value==

[[[language=smalltalk
    [ 2 + 6 ] value
    > 8 
]]]

[[[language=smalltalk
    [ 1 / 0 ] value
    > Error
]]]


${slide:title=A Block with one argument}$
- A bloc can take arguments (the same way a method can)

[[[language=smalltalk
    [ :x | x + 2 ]
]]]

- ==[ ]== delimits the block.
- == :x == is block argument.
- == x + 2 == is the block body.

[[[language=smalltalk
    [ :x | x + 2 ] value: 5
    > 7
]]]

- ==value:== is a message that executes a block passing a value, here 5 as argument. ==x== will have the value 5.


${slide:title=Block execution value}$

- Execution returns the value of the last expression

[[[language=smalltalk
    [ :x | 
            x + 33. 
            x + 2 ] value: 5
    > 7
]]]

${slide:title=Blocks can be stored}$

- We can store a block in variable
- A block can be executed multiple times

[[[language=smalltalk
    | b |
    b := [ :x | x + 2 ].
    
    b value: 5
    > 7
    
    b value: 33
    > 35
]]]


${slide:title=A Design Advice}$

- Do not use blocks with too many arguments (2 or 3 max).
- Define a class instead of block if you should pass more arguments.
- A block is only one single computation it cannot define more facets (printing, testing)


${slide:title=A return in a bloc returns from the method}$

-  When a return is executed in block, computation exits the method that defined the block.

[[[
Integer >> factorial
    "Answer the factorial of the receiver."

    self = 0 ifTrue: [ ^ 1 ].
    self > 0 ifTrue: [ ^ self * (self - 1) factorial ].
    self error: 'Not valid for negative integers'
]]]

${slide:title=More precisely}$

- When a return in a block is executed, computation returns from the method that ""defined"" the block.
- Since blocks can be passed around, from methods to methods, blocks behaves as an exception mechanism.
- Do not use this mechanim, better use Exception.
- Always think twice when you put a return in a block.
- Further readings: *http://deepintopharo.org*

${slide:title=Exercises}$

- Guess how to execute a block taking two arguments

[[[
    [ :x :y | x + y ]   5  7
    > 12
]]]


${slide:title=Other examples|label=expressLoop}$

[[[language=smalltalk 
    
    [ 2 + 3 + 4 + 5 ] value
    > 14
    [ :x | x + 3 + 4 + 5 ] value: 2
    > 14
    [ :x :y | x + y + 4 + 5] value: 2 value: 3
    > 14
]]]

${slide:title=Summary}$

[[[
    [ :variable1 :variable2 ... |
        | tmp |
        expression1.
        ...variable1 ...
        ]
        value: ... value: ...
]]]

- Approximately kind of an anonymous method 
- Technically lexical closures
- Can be passed as arguments to methods, stored in instance variables
- Basis of conditionals and loops (See companion lecture)
- Basis of iterators (See companion lecture)
- Further readings: *http://deepintopharo.org*

