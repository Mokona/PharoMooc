{
	"title":"Runtime Architecture",
	"author":"StÃ©phane Ducasse",
	"complement":"http://stephane.ducasse.free.fr/ stephane.ducasse@inria.fr"
}

${slide:title=Execution Model}$

The Pharo virtual machine (VM) executes compiled code.
- The virtual machine and its plugins are platform specific
- VMs exist for MacOS, Windows, Linux, iOS, ARM, Android

Pharo code is compiled to bytecodes
- Bytecodes are platform neutral instructions

The virtual machine performs dynamically bytecodes to assembly generation

${slide:title=Virtual Machine}$

- Pharo.exe is the virtual machine.
- Can be run from command-line or in interactive (UI) mode.
- It executes compiled code.
- Compiled code is packaged in an ''image''.
- The virtual machine only needs the ''image'' to execute programs.


${slide:title=About Image Files}$

${columns}$

${column:width=40}$

- ''.image'' files act as cache of objects
-- simple objects (points, strings, arrays)
-- but also compiled classes and compiled methods

- Each time we save the image, all objects are saved to disc.
- At startup we get all the objects we saved
- In particular the PC (program counter) is also saved and restored so frozen execution is restarted at launch time

${column:width=60}$

+>file://figures/File-VirtualMachineAndImages.png|width=80+

${endColumns}$

${slide:title=About Change Files}$

''.changes'' file is a tape of all the changes performed in the system.
- It logs class creation/deletion, method addition/removal, actions...
- It is used to browse versions.
- It can replay/undo actions.

A change is associated to an image.
- when the browsers want to display class/method definition they look in the change file associate with the current image.

${slide:title=About Change Files}$

- A change is associated to an image. 
- The image can be executed without the change.
- The change file contains the textual representation of the changes made to the image.

+>file://figures/File-VirtualMachineAndImageChange.png|width=70+

${slide:title=Save your code using a package and version control system}$
- Change and image are handy to develop.
- But they are not softare engineering artefact
- Always have a loading script that takes an image, load your code, run the test, build your application
- Usually we 
-- save code using a CVS (monticello, git)
-- use an integration server to build automatically applications.

${slide:title=About the Source/Changes File}$

${columns}$

${column:width=40}$

''PharoXX.sources'' 
- Contains the textual definition of system classes and predefined objects
- Is read-only.
- Created during release of a new Pharo version.
- Shared by all the users (images)

${column:width=60}$

+>file://figures/File-ImageAtT0.png|width=80+

${endColumns}$

${slide:title=When you define new classes}$

${columns}$

${column:width=40}$

During development or code loading, 
- custom objects are compiled in the image
- custom definitions are added to the changes file
- Still you can browse the definition of the system class (stored in the ''PharoXX.sources'')

${column:width=60}$

+>file://figures/File-ImageAtT1.png|width=80+

${endColumns}$

${slide:title=New change management is coming}$

Old change management
- Inherited from Smalltalk
- Predates version control systems
- Will change in the future

${slide:title=Conclusion}$

- Powerful deployment
- Capture of living system
- Fast boot time
- Support micro commits
- Will use modern version control