{
    "title":"Late Binding",
    "subtitle":"Understanding method lookup - and self/super",
    "author":"StÃ©phane Ducasse and Damien Cassou",
    "complement":"http://stephane.ducasse.free.fr/ stephane.ducasse@inria.fr"
}

${slide:title=Goal}$

- Sending a message
- Dynamic binding/method lookup
- self/super semantics

${slide:title=Message Sending}$

Sending a message means ''looking up'' the method to execute in the class of the receiver and ''executing'' it on the receiver with the arguments.

Sending a message:
# step one: look for the method whose name matches the message selector
# step two: apply the found method to the receiver with the arguments.



${slide:title=Method Lookup}$

Two-step process:
#The lookup starts in the CLASS of the RECEIVER.
#If the method is defined in the method dictionary of CLASS, it is returned.
#- Otherwise the search continues in the superclasses of RECEIVER's class
#- when there is no more superclass, raise an ERROR


${slide:title=Method Lookup}$

+>file://figures/LookupEssence.png|width=65+

${slide:title=Some Lookup Cases}$

+>file://figures/LookupExemple.png|width=70+



${slide:title=Method Lookup Starts in Receiver Class}$

+>file://figures/LookupWithSelfInSuperclassMethod.png|width=50+

[[[
    A new foo
    > ...
    B new foo 
    > ...
]]]

${slide:title=Method Lookup Starts in Receiver Class}$

+>file://figures/LookupWithSelfInSuperclassMethod.png|width=50+

[[[
    A new foo
    > 10
    B new foo 
    > 50
]]]

${slide:title=What is self/this?}$

Take 5 min and write the definition of self/this?

- Your definition should have two points:
-- What does it represent?
-- How the method are looked up when a message is sent to ==self==?

${slide:title=self/this}$

- ==self== represents the receiver of the message
- ==self== in Pharo, ==this== in Java, C\#
- the method lookup starts in the class of the receiver



${slide:title=self represents the receiver}$

+>file://figures/LookupWithSelfInSuperclassMethod.png|width=50+

[[[
    A new bar
    > ...
    B new bar 
    > ...
]]]

${slide:title=self represents the receiver}$

+>file://figures/LookupWithSelfInSuperclassMethod.png|width=50+

[[[
    A new bar
    > 10
    B new bar 
    > 50
]]]


${slide:title=self represents the receiver}$

+>file://figures/LookupWithSelfInSuperclassMethod.png|width=20+
[[[
    B new bar 
    > 50
]]]
- ==aB bar==:  start to look in class B - no method ==bar== defined 
- look in class A - the method ==bar== is found 
- the method ==bar== is applied on the receiver 
- ==self== refers to aB (the receiver of the message)
- ==foo== is sent to ==self==
- ==foo== is looked in the class of the receiver: class ==B==
- ==foo== is found there. It is applied to ==aB==. It returns 50.






${slide:title=self always represents the receiver}$

+>file://figures/LookupWithSelfInSuperclassMethodThreeClasses.png|width=30+

[[[
    A new bar
    > ...
    B new bar 
    > ...
    C new bar
    > ... 
]]]

${slide:title=self always represents the receiver}$

+>file://figures/LookupWithSelfInSuperclassMethodThreeClasses.png|width=30+

[[[
    A new bar
    > 10
    B new bar 
    > 10
    C new bar
    > 50
]]]

${slide:title=When message is not found|label=Inheritance}$

If no method is found and there is no superclass to explore (class Object), a new message called #doesNotUnderstand: is sent to the receiver, with a representation of the initial message.

+>file://figures/LookupEssenceWithDoesNotUnderstand.png|width=30+

${slide:title=When message is not found|label=Inheritance}$

If no method is found and there is no superclass to explore (class Object), a new message called #doesNotUnderstand: is sent to the receiver, with a representation of the initial message.
+>file://figures/LookupEssenceWithDoesNotUnderstandFull.png|width=70+


${slide:title=Step by Step...|label=Inheritance}$

- node1 coucou: #stef
-- node is an instance of Node
-- ==coucou== is looked up in the class Node
-- ==coucou== is not defined in ==Node== > lookup continues in ==Object==
-- ==coucou== is not defined in ==Object== => lookup stops.
-- system sends message: ==doesNotUnderstand: #(coucou: stef)== to ==node1==
-- ==node1== is an instance of ==Node== so ==doesNotUnderstand:== is looked up in the class ==Node==
-- ==doesNotUnderstand:== is not defined in ==Node== => lookup continues in ==Object==
-- ==doesNotUnderstand:== is defined in ==Object== => method is found \+ Exception -> Debugger

${slide:title=doesNotUnderstand:|label=Inheritance}$

- ==doesNotUnderstand:== is a message and it is sent to the receiver
- Every class can customised error handling linked to method not found
- Metaprogramming entry point:
-- Scaffolding patterns
-- Proxies (a proxy raises error to any messages by being a subclass of ==ProtoObject== and ==doesNotUnderstand:== gets invoked)

${slide:title=doesNotUnderstand: and the debugger|label=Inheritance}$

When you get an error, you get the debugger. But this is just a convenience when developing.
In fact:

- the message ==doesNotUnderstand:== is looked up,
- when no class redefines the message ==doesNotUnderstand:==, ==Object== implementation is executed.
-- an exception (==MessageNotUnderstood==) is raised
-- if there is no handler of that exception 
-- the default behavior is to open a debugger
- This behavior can be customized at different points to hide/control/log errors.

[[[
ProtoObject>>doesNotUnderstand: aMessage
    ^ MessageNotUnderstood new 
        message: aMessage; receiver: self; signal
]]]


${slide:title=What is super?}$

Take 5 min and write the definition of super?

- Your definition should have two points:
-- What does it represent?
-- How the method are looked up when a message is sent to ==super==?


${slide:title=How do we access to an overriden method?}$

- You define a method with the same name that one in an upper class.
- You want to execute it in your subclass?
- Use ==super== instead of ==self==

[[[language=Smalltalk
    Workstation>>accept: aPacket
        (aPacket isAddressedTo: self)
            ifTrue: [ Transcript show: 'Accepted by the Workstation ', self name asString ]
            ifFalse: [ super accept: aPacket ]
]]]


${slide:title=Challenge yourself with super!}$

+>file://figures/LookupWithSuperInSuperclassMethodThreeClasses.png|width=30+

[[[
   	A new bar
    > ...
    B new bar 
    > ...
    C new bar
    > ...
]]]

${slide:title=Challenge yourself with super!}$

+>file://figures/LookupWithSuperInSuperclassMethodThreeClasses.png|width=30+

[[[
   	A new bar
    > 10
    B new bar 
    > 20
    C new bar
    > 100
]]]

${slide:title=Super changes the class where the lookup starts}$

+>file://figures/LookupWithSuperInSuperclassMethodThreeClasses.png|width=20+

[[[
    C new bar
    > 100
]]]

- ==bar== is sent to aC (an instance of C): ==bar== is looked up in C, not found, so looked in ==B==
- ==bar== is found in class B, and applied to the receiver ==aC==. 
- ==bar== is sent to ==super==, ==super== is the receiver (aC), but look up starts above class ==B==
- ==bar== is found in class ==A== and it is applied to the receiver ==aC==.
- ==foo== is sent to ==self==: ==self== represents the receiver: ==aC==
- ==foo== is found in class ==C== and applied to ==aC==, it returns 50.


${slide:title=Super?}$

- ==super== refers to the receiver of the message (like ==self==. Yes!)
- The method lookup starts in the superclass of ...?



${slide:title=Super starts lookup in superclass of the class using it}$

- ==super== refers to the receiver of the message (like ==self==. Yes!)
- The method lookup starts in the superclass of the class containing the super expression.

${slide:title=Super is static / self is dynamic}$

- There is no reference to the receiver in the method lookup of a ==super== invocation!

${slide:title=self is dynamic|label=selfdynamic}$

- When we read the body of a method, there is no way that we know which method that will be executed: new instances of different classes can be created and the message bar sent to them.
- ==self== acts as a hook. Code of subclasses can be injected into ==self== sends.
+>file://figures/SelfIsDynamic1.png|width=20+


${slide:title=super is static|label=super}$

+>file://figures/SuperIsStatic.png|width=15+

- At compilation-time, just reading the code we know that we should look above the class containing the ""method"" using ==super==.



${slide:title=Yes even some books got it wrong}$

- Wrong definition: super looks for the method in the superclass of the class of the ""receiver"".
- Wrong!
- It would loop forever!
- ==aC foo== loops, because ==super== points to ==aC== and the superclass of the class of the receiver is B.

+>file://figures/LookupWithWrongDefinition.png|width=45+




${slide:title=What you should know}$

- ==self== ''always'' represents the receiver
- the method lookup maps a message to a method
- the method lookup starts in the class of the receiver...
- ...and goes up in the hierarchy
- ==super== is the receiver, lookup starts is superclass of the method using the expression.
- self sends act as a hook. Code of subclasses may be invoked.







