{
	"title":"SUnit",
	"author":"Stéphane Ducasse and Damien Cassou",
	"complement":"http://stephane.ducasse.free.fr/ \\\\ stephane.ducasse@inria.fr"
}

${slide:title=Goal of the lectyre|label=less}$

- How can you trust that the changes did not destroy something?
- What is my confidence in the system?
- How do I write tests?
- What is unit testing?
- What is SUnit?


${slide:title=Tests in a nutshell|label=uniform}$

- Tests represent your trust in the system
- Build them incrementally
-- Do not need to focus on everything
-- When a new bug shows up, write a test
- Even better write them before the code
-- Act as your first client, better interface
- Active documentation always in sync
- It has a cost, but pay off is big
-- writing them, maintain them

${slide:title=Testing Style}$

"
The style here is to write a few lines of code, then a test that should run, or even better, to write a test that won't run, then write the code that will make it run.
"

- write unit tests that thoroughly test a single class
- write tests as you develop (even before you implement)
- write tests for every new piece of functionality

''Developers should spend 25-50\% of their time developing tests.''

${slide:title=But I can’t cover everything!}$

- Sure! Nobody can but
- When someone discovers a defect in your code, first write a test that demonstrates the defect.
- Then debug until the test succeeds.

	
''Whenever you are tempted to type something into a print statement or a debugger expression, write it as a test instead.'' Martin Fowler


${slide:title=Unit Tests}$

- Unit tests ensure that you get the specified behavior of the public interface of a class
- Normally tests a single class

A test
- Create a context, 
- Send a stimulus, 
- Check the results

${slide:title=Set TestCase}$

[[[
TestCase subclass: # SetTestCase
   superclass: TestCase 
]]]

[[[
SetTestCase>>testAdd 
  | empty |
  empty := Set new.                      “Context”
  empty add: 5.                                  “Stimulus”
  self assert: (empty includes: 5).         “Check”

SetTestCase run: #testAdd
]]]
``````````

${slide:title=Summary|label=instanceCreation}$

- Everything is an object.
- We send messages to objects.
- Method selection is late bound.
- Instances are created by sending message to other objects, or classes.