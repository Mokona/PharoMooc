{
    "title":"Messages for Java Programmers",
    "author":"St√©phane Ducasse and Damien Cassou",
    "complement":"http://www.pharo.org"
}

${slide:title=Only Objects and Messages|label=objectives}$

Remember we ""only"" manipulate objects: mouse, booleans, arrays, numbers, compressed, strings, windows, scrollbars, canvas, files, trees, compiler, sound, url, socket, fonts, text, collections, stack, shortcut, streams, ...

and we send messages, messages, messages and messages (and closures)


${slide:title=Equivalence|label=objectives}$
[[[
	ArrayList<String> strings = new ArrayList<String>();
]]]

[[[language=smalltalk
strings := ArrayList new.
]]]


${slide:title=Equivalence|label=objectives}$

[[[
Thread regThread = new Thread(
       new Runnable() {
         public void run() {
                this.doSomething();} });
 regThread.start();
]]]

[[[language=smalltalk
[self doSomething] fork.
]]]


${slide:title=Three kind of messages|label=objectives}$

- Unary
[[[language=smalltalk
5 factorial
Transcript cr
]]]

- Binary
[[[language=smalltalk
3 + 4
]]]

- Keyword-based messages
[[[language=smalltalk
2 between: 0 and: 5

Transcript show: 'hello world' ; cr
]]]



${slide:title=Keyword Messages}$

[[[language=Smalltalk
    anObject keyword1: argument1 keyword2: argument2
]]]    

equivalent to

[[[language=Smalltalk
    receiver.keyword1keyword2(argument1, argument2)
]]]


${slide:title=Keyword Messages for Javaists}$

[[[language=Smalltalk
    postman.send(mail,recipient);
]]]

${slide:title=Keyword Messages for Javaists}$

[[[language=Smalltalk
    postman.send(mail,recipient);
    postman . send ( mail , recipient );
]]]


${slide:title=Keyword Messages for Javaists}$

[[[language=Smalltalk
    postman.send(mail,recipient);
    postman . send ( mail , recipient );
    postman send mail recipient
]]]

${slide:title=Keyword Messages for Javaists}$

[[[language=Smalltalk
    postman.send(mail,recipient);
    postman . send ( mail , recipient );
    postman send mail recipient
    postman send mail to recipient
]]]

${slide:title=Keyword Messages for Javaists}$

[[[language=Smalltalk
    postman.send(mail,recipient);
    postman . send ( mail , recipient );
    postman send mail recipient
    postman send mail to recipient
    postman send: mail to: recipient
]]]


${slide:title=Keyword Messages for Javaists}$

[[[language=Smalltalk
    postman.send(mail,recipient);
    
    postman send: mail to: recipient
]]]

- The message is named ==send:to:== 
- It is sent to ==postman==
- With two arguments: ==mail== and ==recipient==

${slide:title=Conditional are just messages}$

Booleans are objects
Conditional are messages sent to booleans or block

[[[language=smalltalk
	initialAnswer := fullName isEmptyOrNil
		ifTrue: [ 'FirstnameLastname' translated ]
		ifFalse: [ fullName ]
]]]

${slide:title=Summary}$

- Three kinds of messages: unary, binary and keywords
- () > unary > binary > keywords
