{
	"title":"Pharo Syntax",
	"subtitle":"",
	"author":"Stephane Ducasse",
	"complement":"http://stephane.ducasse.free.fr/ \\\\ stephane.ducasse@inria.fr"
}


${slide:title=Outline|label=Outline}$

- Literals: numbers, strings, arrays
- Variable, assignments, returns
- Pseudo-variables
- Message Expressions	 	
- Block expressions
- Conditional and Loops


${slide:title=Originally Made for Kids|label=kids}$

- Read it as a non-computer-literate person:

[[[language=smalltalk
| bunny |
bunny := Actor fromFile: 'bunny.vrml'.
bunny head doEachFrame:
	[ bunny head
		pointAt: (camera
					transformScreenPointToScenePoint: Sensor mousePoint
					using: bunny)
		duration: camera rightNow ]
]]]


${slide:title=Numbers|label=Outline}$

- SmallInteger, Integer,
-- 4, 2r100 (4 in base 2), 3r11 (4 in base 3), 1232
- Automatic coercion
-- == 1 + 2.3 -> 3.3==
- ==1 class== -> ==SmallInteger==
- ==1 class maxVal class== -> ==SmallInteger==
- ==(1 class maxVal + 1) class== -> ==LargeInteger==
-- Fraction, Float, Double
- 3/4, 2.4e7, 0.75d
-- ==(1/3) + (2/3)== -> 1 
- ==1000 factorial / 999 factorial== -> 1000
-- ==2/3 + 1== -> ==(5/3)==

${slide:title=Characters|label=characters}$

- Characters:
-- $F, $Q $U $E $N $T $i $N
- Unprintable characters:
-- Character space, Character tab, Character cr

${slide:title=Strings|label=Strings}$
- Some ways to obtain a string
-- ==#mac asString== -> =='mac'==
-- ==12 printString== -> =='12'==
-- =='This packet travelled around to the printer'==
-- ==String with: $A==
- Collection of characters
-- =='lulu' at: 1== -> ==$l==
- To introduce a single quote inside a string, just double it.
- =='l''idiot'==

${slide:title=Symbols|label=symbols}$
- Kinds of String
- Unique in the system (see after)
- start with ==#==
-- ==#class== ==#mac== ==#at:put:== ==#+== ==#accept:==


${slide:title=Symbols vs. Strings|label=symbols}$


- Symbols are used as method selectors, unique keys for dictionaries
- A symbol is a read-only object, strings are mutable objects
- A symbol is unique, strings are not

[[[
#calvin == #calvin -> true
'calvin' == 'calvin' -> false
#calvin, #zeBest -> 'calvinzeBest'
]]]
- Symbols are good candidates for identity based dictionaries (IdentityDictionary)
- Hint: 
-- Comparing strings is slower then comparing symbols by a factor of 5 to 10. 
-- However, converting a string to a symbol is more than 100 times more expensive.


${slide:title=Comments and Tips|label=comment}$

- "This is a comment"
- A comment can span several lines. Moreover, avoid putting a space between the " and the first character. When there is no space, the system helps you to select a commented expression. You just go after the " character and double click on it: the entire commented expression is selected. After that you can printIt or doIt, etc.


${slide:title=Arrays|label=arrays}$

- Syntax:  ==#(  )==
- ==#(1 2 3)== 
-- an array with 3 numbers
- ==#('lulu' (1 2 3))== 
--an array with two elements: a string and an array
- ==#(mac node1 pc node2 node3 lpr)==
-- an array of symbols.
- When one prints it it shows
[[[
#(#mac #node1 #pc #node2 #node3 #lpr)
]]]


${slide:title=Byte Arrays |label=arrays}$

- ==#[1 2 255]==

${slide:title=Arrays can contains heterogenous objects |label=arrays}$

- Heterogenous
[[[
 #('lulu' (1 2 3))
	-> #('lulu' #(1 2 3))
 #('lulu' 1.22 1)
	-> #('lulu' 1.22 1)
]]]
- An array of symbols:
[[[
#(calvin hobbes suzie)
	-> #(#calvin #hobbes #suzie)
]]]
- An array of strings:
[[[
#('calvin' 'hobbes' 'suzie')
	-> #('calvin' 'hobbes' 'suzie')
]]]

${slide:title=Syntax Summary|label=arrays}$

- comment: "a comment"
- character: $c $h $a $r $a $c $t $e $r $s $# $@
- string: 'a nice string' 'lulu' 'l'idiot'
- symbol: #mac #+
- array: #(1 2 3 (1 3) $a 4)
- byte array: #[1 2 3]
- integer: 1, 2r101
- real: 1.5, 6.03e-34,4, 2.4e7
- float: 1/33
- boolean: true, false
- point: 10@120
- Note that @ is not an element of the syntax, but just a message sent to a number. This is the same for /, bitShift, ifTrue:, do: ...



