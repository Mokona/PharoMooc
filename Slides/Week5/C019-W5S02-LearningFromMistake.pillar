{
  "title":"Common Errors",
    "slidesid" : "W5S02"
}

${slide:title=What You Will Learn}$

Find and fix common mistakes faster

${slide:title=A Problem}$

[[[
DiceHandle >> + aDiceHandle
   | res |
   res := DiceHandle new
   self dices do: [ :each | ... ].
]]]

+>file://figures/DebugSelf2-cut.png|width=90+

${slide:title=Missing Period}$

- Separate instructions with period (==.==)

${slide:title=A Problem}$

[[[
x includes: 33
   ifTrue: [ self do something ]
]]]

""Error:"" Message ==includes:ifTrue:== does not exist

${slide:title=A Problem}$

[[[
self assert: players includes: aPlayer
]]]

""Error:"" Message ==assert:includes:== does not exist

${slide:title=Keyword-Based Messages}$

- keyword messages are built out of fragments
- the message is the longuest sequence of fragments
- use parentheses to delimit multiple keyword messages

${slide:title=A Problem}$

[[[
numbers := OrderedCollection new
             add: 35
]]]

""Error:"" ==numbers== is the number 65 and not a collection

${slide:title=A Problem}$

[[[
Dice >> setFaces: aNumber
   ^ faces := aNumber

Dice class >> new
   ^ super new setFaces: 6
]]]

""Error:"" ==Dice new== returns 6 instead of a dice

${slide:title=Forgotten yourself}$

[[[
numbers := OrderedCollection new
             add: 35;
             yourself
]]]

is equivalent to

[[[
| numbers |
numbers := OrderedCollection new.
numbers add: 35.
numbers
]]]

${slide:title=Forgotten yourself}$

- ==add:== and ==setFaces:== return their argument, not the receiver
- send ==yourself== after a sequence of messages if you want the receiver

${slide:title=A Problem}$

[[[
Book>>borrow
   inLibrary ifFalse: [ ... ].
   ...
]]]

""Error:"" ==nil== does not understand ==ifFalse:==

${slide:title=Uninitialized variable}$

[[[
Book>>borrow
   inLibrary ifFalse: [ ... ].
   ...
]]]

""Error:"" ==nil== does not understand ==ifFalse:==

The variable is not yet initialized

${slide:title=A Problem}$

[[[
Book>>initialize
   inLibrary := True

Book>>borrow
   inLibrary ifFalse: [ ... ].
  ...
]]]

""Error:"" Class ==True== does not understand ==ifFalse:==

${slide:title=True vs. true}$

- ==nil== is the unique instance of the class ==UndefinedObject==
- ==true== is the unique instance of the class ==True==
- Class names start with an uppercase letter

${slide:title=A Problem}$

[[[
Dice >> roll
   faces atRandom
]]]

""Error:"" ==aDice roll== returns ==aDice== instead of a number

${slide:title=Forgetting to Return the Result}$

[[[
Dice >> roll
   faces atRandom
]]]

is equivalent to

[[[
Dice >> roll
   faces atRandom.
   ^ self
]]]

${slide:title=A Problem}$

[[[
Dice class >> new
   super new setFaces: 0
]]]

""Error:"" ==Dice new== returns the class instead of the new instance

${slide:title=Forgetting to Return the Result}$

[[[
Dice class >> new
   super new setFaces: 0
]]]

is equivalent to

[[[
Dice class >> new
   super new setFaces: 0.
   ^ self
]]]

- ==new== is sent to a class
- ==self== is the class ==Dice==
- returns ==Dice== and not its newly created instance

${slide:title=Forgetting to Return the Result}$

- in a method, ==self== is returned by default
- do not forget the caret ==^== to return something else

${slide:title=A Problem}$

[[[
Dice class >> new
  ^ self new setFaces: 0
]]]

""Error:"" System is frozen

${slide:title=Infinite Loops in Overridden Methods}$

- use ==super== in overridden methods

${slide:title=What You Should Know}$

- How to identify common errors faster
- Check periods ==.==
- Check parentheses ==(== and ==)==
- Check carets ==^==
- Check ==yourself==
- Use the debugger to understand the problem

% Local Variables:
% compile-command: "cd ../.. && ./compile.sh --to=Beamer Slides/Week5/C019-W5S02-LearningFromMistake.pillar"
% End:
