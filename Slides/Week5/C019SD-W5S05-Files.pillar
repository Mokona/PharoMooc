{
  "title":"Files in Pharo",
  "slidesid" : "W5S05"
}

${slide:title=What You Will Learn}$

- File API (close to Java NIO)
- Basic stream API

${slide:title=Getting Started}$

[[[
| working |
working := FileSystem disk workingDirectory.
]]]

Direct files and folders
[[[
working children.
]]]

All files and folders.
[[[
working allChildren.
]]]

${slide:title=FileReference}$

FileReferences represent file or folders

[[[
| working |
working := FileSystem disk workingDirectory.
working class
> FileReference
]]]

Can also be created as follow:
[[[
'/Users/ducasse/Workspace/FirstCircle/Pharo/20' asFileReference
]]]

${slide:title=All Files That...}$

[[[
aFileRef allChildren 
   select: [ :each | each basename endsWith: 'jpeg' ]
]]]

${slide:title=basename}$

[[[
'foo/gloops.taz' asFileReference basename
> 'gloops.taz'
]]]

[[[
FileSystem workingDirectory fullName
>'/Users/ducasse/Pharo/50/current'
 
FileSystem workingDirectory basename
> 'current'
]]]

${slide:title=Navigating Down and Up}$

Use message ==/== to build a path
[[[
| working cache parent |
working := FileSystem disk workingDirectory. 
cache := working / 'package-cache'.
]]]

Use ==parent== to get up
[[[
parent := cache parent.
parent = working
> true
]]]

${slide:title=File Entry}$

[[[
| c | 
c := FileSystem disk workingDirectory / 'package-cache'.
c entry creationTime.
> aDateAndTime(2015-11-03T10:00:51-08:00)

c entry permissions isWritable.
> true
]]]

${slide:title=Working with Streams}$

[[[
| working stream |
working := FileSystem disk workingDirectory. 
stream := (working / 'foo.txt') writeStream. 
stream nextPutAll: 'Hello World'.
stream close.
stream := (working / 'foo.txt') readStream. 
stream contents.
> 'Hello World' 
stream close.
]]]

${slide:title=With writeStreamDo: and readStreamDo:}$

[[[
| working |
working := FileSystem disk workingDirectory.
working / 'foo.txt'
  writeStreamDo: [ :stream | stream nextPutAll: 'Hello World' ]. 
working / 'foo.txt'
  readStreamDo: [ :stream | stream contents ].
]]]

${slide:title=Summary}$

- Files references are objects
- Manipulate file references
- Permissions are objects
- Read ''Files with FileSystem'' Chapter in "Deep into Pharo"
