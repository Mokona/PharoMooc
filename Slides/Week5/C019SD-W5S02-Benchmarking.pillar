{
  "title":"Benchmarking in Pharo",
  "slidesid" : "W5S02"
}

${slide:title=Common Wisdom}$

If you did not profile your code you may have 40-50% speed up waiting for you.


${slide:title=Measuring Execution Speed}$

- We create an expression and use ==[ expression ] timeToRun==
- For example ==select:==, then ==collect:== vs. ==select:thenCollect:==


${slide:title=timeToRun example}$
[[[
| coll |
coll := #(1 2 3 4 5 6 7 8 9 10) asOrderedCollection.
[ 1000000 timesRepeat: [ 
		(coll select: [ :each | each > 5]) collect: [ :i | i * i ]]
	] timeToRun
>  "0:00:00:00.517"
]]]

[[[
| coll |
coll := #(1 2 3 4 5 6 7 8 9 10) asOrderedCollection.
[ 1000000 timesRepeat: [ 
		coll 
			select: [ :each | each > 5]
			thenCollect: [ :i | i * i ]]
		] timeToRun 
> "0:00:00:00.362"
]]]

${slide:title=bench}$

- Returns how many times the code can get executed in 5 seconds
- Answer a string with meaningful description

[[[
[ 1000 factorial ] bench 
> '610.234 per second' 
]]]

The higher the better!

${slide:title=Time Profiler}$

- ==TimeProfiler==: a sampling-based code profiler
- At regular interval, take information from the execution stack
[[[
TimeProfiler 
  spyOn: [ 20 timesRepeat: [ 
            Transcript show: 1000 factorial printString ] ]
]]]

${slide:title=Time Profiler}$

+>file://figures/TimeProfiler.png|width=110+

${slide:title=Summary}$

- ==[ anExpression ] timeToRun==
- ==[ anExpression ] bench==
- ==TimeProfiler spyOn: [ anExpression ]==
- Check ''Profiling Applications'' Chapter in ""Deep into Pharo"" (at *http://books.pharo.org*)