{
	"title":"Benchmarking in Pharo"
}

${slide:title=Common Wisdom}$

If you did not profile your code you may have 50% speed up waiting for you.


${slide:title=Measuring execution speed}$

For example ==select:==, then ==collect:== vs. ==select:thenCollect:==
- We create an expression and use ==[ expression ] timeToRun==
[[[
| coll |
coll := #(1 2 3 4 5 6 7 8) asOrderedCollection.
[ 100000 timesRepeat: [ (coll select: [:each | each > 5]) collect: [:i |i * i]]] timeToRun
]]]

[[[
| coll |
coll := #(1 2 3 4 5 6 7 8) asOrderedCollection.
[ 100000 timesRepeat: [ coll select: [:each | each > 5] thenCollect:[:i |i * i]]] timeToRun 
]]]

${slide:title=bench}$

- Return how many times the receiver can get executed in 5 seconds
- Answer a string with meaningful description

[[[
[ 1000 factorial ] bench 
]]]

The higher the better!

${slide:title=Time Profiler}$

- ==TimeProfiler==: a sampling-based code profiler
- At regular interval, take information from the execution stack
[[[
TimeProfiler 
  spyOn: [ 20 timesRepeat: [ 
            Transcript show: 1000 factorial printString ] ]
]]]

${slide:title=Time Profiler}$

+>file://figures/TimeProfiler.png|width=110+

${slide:title=Summary}$

- ==[ anExpression ] timeToRun==
- ==[ anExpression ] bench==
- ==TimeProfiler spyOn: [ anExpression ]==
- Check ''Profiling Applications'' Chapter in "Deep into Pharo" 