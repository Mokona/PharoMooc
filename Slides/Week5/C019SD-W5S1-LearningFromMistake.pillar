{
	"title":"Learning From Common Errors"
}

${slide:title=You will learn}$

- How to recover faster from mistakes
- Get the frequent mistakes


${slide:title=Missing period}$

+>file://figures/printOnUndefined.png|width=80+

- Message ==printOn:nextPutAll:== is undefined

[[[
Dice >>	printOn: aStream
  super printOn: aStream.
  aStream nextPutAll: '(', faces printString , ')'
]]]

- Missing a period (message separator)


${slide:title=Does Not Understand Self}$

+>file://figures/DebugSelf1.png|width=110+

%+>file://figures/DebugSelf2.png|width=80+


${slide:title=Does Not Understand Self}$

+>file://figures/DebugSelf2.png|width=100+


${slide:title=With Separator}$
[[[
+ aDiceHandle 

  | res |
  res := DiceHandle new.
  self dices do: [ :each | res addDice: each ].
  aDiceHandle dices do: [ :each | res addDice: each ].
  ^ res
]]]

${slide:title=Forgotten parentheses}$

[[[
  x includes: 33 
    ifTrue: [ self do something ]
]]]

- ==includes:ifTrue:== is an unknown message

[[[
  (x includes: 33)
    ifTrue: [ self do something ]
]]]

- Read again the lectures () vs. []

${slide:title=Forgotten parentheses}$

[[[
  self assert: players includes: aPlayer
]]]
==assert:includes:== does not exist
[[[
  self assert: (players includes: aPlayer)
]]]

Do not forget to use parentheses when sending multiple keyword messages in one expression


${slide:title=Forgotten yourself}$

[[[
| col |
col := OrderedCollection new add: 35; add: 65.
col do: [ :each | ....]
]]]

- ==col== is 65 because ==add:== returns its argument and not the receiver

[[[
| col |
col := OrderedCollection new add: 35; add: 65; yourself. 
col do: [ :each | ....]
]]]

- ==yourself== returns self, hence the receiver and here the collection.


${slide:title=True vs. true}$

[[[
Book>>initialize
  inLibrary := True
]]]

[[[
Book>>initialize
  inLibrary := true
]]]

 ==true== is the instance of the class ==True==

${slide:title=nil is not a Boolean}$

nil is not an acceptable receiver for ifTrue:

${slide:title=Method argument are read only}$

- Do not try to assign a value to a method argument
- Arguments are read only!

[[[
MyClass >> setName: aString 
  aString := aString, 'Device'.
  name := aString
]]]

Does not compile!

${slide:title=Forgetting to return the result}$

- In a method self is returned by default
- Do not forget ==^== to return something else!
[[[
Dice >> roll
  faces atRandom
]]]

return self not the expression result

[[[
Dice >> roll
  ^ faces atRandom
]]]

${slide:title=Initialize loops}$

[[[
Dice class >> new 
  ^ self new setFaces: 0
]]]


${slide:title=What you should know}$

- How to identify faster error
- Check period
- Check parentheseses
- Use the debugger to look at the problem


