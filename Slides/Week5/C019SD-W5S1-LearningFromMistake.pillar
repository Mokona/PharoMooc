{
	"title":"Learning From Common Errors"
}

${slide:title=You will learn}$

- Understand common mistakes
- How to recover faster from mistakes

${slide:title=Missing period}$

- Remember . separates messages

+>file://figures/printOnUndefined.png|width=100+

Message ==printOn:nextPutAll:== does not exist
- Qualitant Assistant will warn you
- But you may also send a message you did not want


${slide:title=Missing period}$

Problem:
[[[
Dice >>	printOn: aStream
   super printOn: aStream
   aStream nextPutAll: '(', faces printString , ')'
]]]
Solution:
[[[
Dice >>	printOn: aStream
   super printOn: aStream.
   aStream nextPutAll: '(', faces printString , ')'
]]]

${slide:title=Does Not Understand Self}$

+>file://figures/DebugSelf1.png|width=110+

%+>file://figures/DebugSelf2.png|width=80+


${slide:title=Does Not Understand Self}$

+>file://figures/DebugSelf2.png|width=100+


${slide:title=Again A Missing Period}$
[[[
+ aDiceHandle 

  | res |
  res := DiceHandle new.
  self dices do: [ :each | res addDice: each ].
  aDiceHandle dices do: [ :each | res addDice: each ].
  ^ res
]]]

${slide:title=Keyword-Based Messages}$

Remember 
- Keyword messages are built out of fragments 'word:'
- The message is the longuest sequence of fragments
- ==between:and:== in ==x between: 0 and: 20== 

Problem:
[[[
  x includes: 33 
    ifTrue: [ self do something ]
]]]

- ==includes:ifTrue:== is an unknown message

${slide:title=Parentheses to Delimit Messages}$

Problem:
[[[
  x includes: 33 
    ifTrue: [ self do something ]
]]]

Solution:
[[[
  (x includes: 33)
    ifTrue: [ self do something ]
]]]

- Read again the lectures '() vs. []'

${slide:title=Forgotten parentheses}$

[[[
  self assert: players includes: aPlayer
]]]

- ==assert:includes:== does not exist

[[[
  self assert: (players includes: aPlayer)
]]]

- Use parentheses to delimit multiple keyword messages


${slide:title=Forgotten yourself}$

[[[
| col |
col := OrderedCollection new add: 35; add: 65.
col do: [ :each | ....]
]]]

- ==col== is 65 because ==add:== returns its argument and not the receiver

[[[
| col |
col := OrderedCollection new add: 35; add: 65; yourself. 
col do: [ :each | ....]
]]]

- ==yourself== returns self, hence the receiver and here the collection.


${slide:title=True vs. true}$

Problem: 
[[[
Book>>initialize
  inLibrary := True
]]]

Solution: 
[[[
Book>>initialize
  inLibrary := true
]]]

 ==true== is the instance of the class ==True==

${slide:title=nil is not a Boolean}$

==nil== is not an acceptable receiver for ifTrue:
==nil== is the unique instance of ==UndefinedObject==


${slide:title=Forgetting to Return the Result}$

- In a method self is returned by default
- Do not forget ==^== to return something else!

Problem:
[[[
Dice >> roll
  faces atRandom
]]]

return self not the expression result

Solution:
[[[
Dice >> roll
  ^ faces atRandom
]]]

${slide:title=Returning Class instead of Instance}$

Problem: 
[[[
Dice class >> new 
  self new setFaces: 0
]]]

is equivalent to 

[[[
Dice class >> new 
  self new setFaces: 0
  ^ self 
]]]
- ==self== is the class ==Dice==
- Returns ==Dice== and not its newly created instance

${slide:title=Returning Instance}$

Problem: 
[[[
Dice class >> new 
  self new setFaces: 0
]]]

Solution: 
[[[
Dice class >> new 
  ^ self new setFaces: 0 ; yourself
]]]

${slide:title=Instantiation Loops}$

Problem: 
[[[
Dice class >> new 
  ^ self new setFaces: 0
]]]

Solution: 
[[[
Dice class >> new 
  ^ self basicNew setFaces: 0 ; yourself
]]]


${slide:title=What you should know}$

- How to identify faster error
- Check period
- Check parentheseses
- Use the debugger to look at the problem


