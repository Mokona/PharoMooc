{
  "title":"Debugging in Pharo",
  "slidesid" : "W5S03"
}

${slide:title=Common Wisdom}$

It can be easier to talk to objects than to read classes
- The system is alive: Talk to it
- The debugger is your best friend
- Don't be afraid of it

${slide:title=Debugging}$

- Closing the debugger does not solve your bugs :)

- The debugger is your best friend:
-- access objects in a particular call
-- check state
-- send messages to specific objects
-- compile code on the fly

Watch the videos on the debugger, on the inspector and practice!

${slide:title=Simple Trace}$

[[[
Transcript cr; show: 'here with value: ', x printString
]]]

- A bit too traditional and often inefficient because too verbose
- We can do better!


${slide:title=Defining a Breakpoint}$

[[[
  ...
  Halt now.
  ...
]]]

 ==Halt now== or ==self halt== will systematically 
- stop the program and 
- invoke the debugger

${slide:title=Single Shot Halt}$

[[[
  ...
  Halt once.
  ...
]]]

To arm it:
[[[
  Halt enableHaltOnce
]]]

==Halt once==, once enabled, stop the first time

${slide:title=Halt After n Iterations}$

[[[
Halt onCount: 10
]]]

${slide:title=You Can Invent Your Own}$

Define a global variable and store an object or a value

[[[
Debug == self 
  ifTrue: [ Halt now ]
]]]

[[[
Debug > 4 
  ifTrue: [ Halt now ]
]]]

${slide:title=Conditional Halt}$
How to halt a method that is heavily used?
- ==if: aSelector== stops the execution only if the method has been invoked from message named ==aSelector==
- ==if: aBlock== stops the execution only if the block is true

Example:
- ==foo== will stop only when invoked from the message ==printString==
[[[
foo 
  ...
  Halt if: #printString
  ...
]]]

${slide:title=Conditional Halt and Test}$

Hint: Write a test and get benefit for it

Example:
[[[
foo 
  ...
  Halt if: #testSetInitialized
  ...
]]]

- ==foo== will stop only when invoked from the test named ==#testSetInitialized==

${slide:title=Summary}$

- Watch the videos about the debugger
- Watch the videos about the inspector
- Try, try and try them
- These tools are powerful
