{
    "title":"Class and Method Definitions",
	 "slidesid":"W1S06"
}

${slide:title=Class Definition}$

[[[
Object subclass: #NameOfSubclass
    instanceVariableNames: ''
    classVariableNames: ''
    package: 'PackageName'
]]]

${slide:title=Class Definition within the Pharo IDE}$

+>file://figures/PointClass.png|width=98+

${slide:title=Class Definition is a Message}$

[[[
Object subclass: #Point
  instanceVariableNames: 'x y'
  classVariableNames: ''
  package: 'Graphics'
]]]

We send the message ==subclass:inst....== to the superclass to create the class

${slide:title=Method Definition}$

[[[
messageSelectorAndArgumentNames
   "comment stating purpose of message"

  | temporary variable names |
  statements
]]]

A method is always public

${slide:title=Method Definition within the Pharo IDE}$

+>file://figures/FactorialInBrowser.png|width=98+

${slide:title=Presentation Convention}$

In this lecture, a method will be displayed as 

[[[
Integer >> factorial
  "Answer the factorial of the receiver."
  self = 0 ifTrue: [ ^ 1 ].
  self > 0 ifTrue: [ ^ self * (self - 1) factorial ].
  self error: 'Not valid for negative integers'
]]]

- ""Integer >>"" is not part of the syntax
-- it tells you the method's class



${slide:title=Remember Messages}$

[[[
Integer >> factorial
  "Answer the factorial of the receiver."

  self = 0 ifTrue: [ ^ 1 ].
  self > 0 ifTrue: [ ^ self * (self - 1) factorial ].
  self error: 'Not valid for negative integers'
]]]

- ==factorial== is the method name
- ==\===, ==>==, ==\*== and ==-== are binary messages
- The caret ==^== is for returning a value
- ==factorial== is an unary message
- ==ifTrue:== and ==error:== are keyword messages


${slide:title=A Method Returns self by Default}$

[[[
Game >> initializePlayers
  self players
    at: 'tileAction'
    put: ( MITileAction director: self )
]]]

is equivalent to

[[[
Game >> initializePlayers
  self players
    at: 'tileAction'
    put: ( MITileAction director: self ).
  ^ self       "<-- this is optional"
]]]

${slide:title=Method Arguments are Read Only}$

Do not try to assign a value to a method argument

[[[
MyClass >> setName: aString
  aString := aString, 'Device'.    "<-- error"
  ... aString ...
]]]

should be turned into

[[[
MyClass >> setName: aString
  | string |
  string :=  aString, 'Device'.
  ... string ...
]]]

${slide:title=Class Methods}$

${columns}$

${column:width=60}$

+>file://figures/ClassMethodDateToday.png|width=90+

${column:width=40}$

- press the button ==class== to define a class method
- in lectures, we add ==class==:

${endColumns}$

[[[
Point class >> x: xInteger y: yInteger 
  "Answer an instance of me with coordinates xInteger and yInteger."

  ^ self basicNew setX: xInteger setY: yInteger
]]]

${slide:title=What You Should Know}$

- A class is defined by sending a message to its superclass 
- Classes are defined inside packages
- Methods are public
- By default a method returns the receiver, ==self==
- Class methods are just methods of the class side

% Local Variables:
% compile-command: "cd ../.. && ./compile.sh --to=Beamer Slides/Week1/C019-W1S06-ClassAndMethodDefinition.pillar"
% End:
