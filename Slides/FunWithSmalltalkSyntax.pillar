! A Little Journey in the Smalltalk Model

- Stephane Ducasse
- stephane.ducasse@inria.fr
- *>http://stephane.ducasse.free.fr/*

!! Goal

- Lower your stress :)
- show you that this is simple

+>file://figures/Patisseries.png+

!! Appetizer

+>file://figures/Apero.png+

+Yeah! Smalltalk is a dynamically typed language>file://figures/NamedObject.png+

[[[
ArrayList<String> strings
= new ArrayList<String>();
strings := ArrayList new.
]]]

!! Shorter

[[[
Thread regThread = new Thread(
new Runnable() {
public void run() {
this.doSomething();}
});
regThread.start();
]]]

- [self doSomething] fork.

[[[ Smalltalk = Objects + Messages + (...)]]]

!! Roadmap

- Fun with numbers

+>file://figures/LogoPharo.png+

- I class
-- \> SmallInteger
- I class maxVal
-- \> 1073741823
- I class maxVal \+1
-- \> 1073741824
- (1 class maxVal \+ 1) class
-- \> LargePositiveInteger

+>file://figures/Meringue.png+

[[[(1/3) + (2/3)
>1
]]]

[[[
2/3 + 1
> 5/3
]]]

[[[
1000 factorial
4023872600770937735437024339230039857193748642107146325437999104299385123986290205920442084869694048004799
8861019719605863166687299480855890132382966994459099742450408707375991882362772718873251977950595099527612
0874975462497043601418278094646496291056393887437886487337119181045825783647849977012476632889835955735432
5131853239584630755574091142624174743493475534286465766116677973966688202912073791438537195882498081268678
3837455973174613608537953452422158659320192809087829730843139284440328123155861103697680135730421616874760
9675871348312025478589320767169132448426236131412508780208000261683151027341827977704784635868170164365024
1536913982812648102130927612448963599287051149649754199093422215668325720808213331861168115536158365469840
4670897560290095053761647584772842188967964624494516076535340819890138544248798495995331910172335555660213
9450399736280750137837615307127761926849034352625200015888535147331611702103968175921510907788019393178114
1945452572238655414610628921879602238389714760885062768629671466746975629112340824392081601537808898939645
1826324367161676217916890977991190375403127462228998800519544441428201218736174599264295658174662830295557
0299024324153181617210465832036786906117260158783520751516284225540265170483304226143974286933061690897968
4825901254583271682264580665267699586526822728070757813918581788896522081643483448259932660433676601769996
1283186078838615027946595513115655203609398818061213855860030143569452722420634463179746059468257310379008
4024432438465657245014402821885252470935190620929023136493273497565513958720559654228749774011413346962715
4228458623773875382304838656889764619273838149001407673104466402598994902222217659043399018860185665264850
6179970235619389701786004081188972991831102117122984590164192106888438712185564612496079872290851929681937
2388642614839657382291123125024186649353143970137428531926649875337218940694281434118520158014123344828015
0513996942901534830776445690990731524332782882698646027898643211390835062170950025973898635542771967428222
4875758676575234422020757363056949882508796892816275384886339690995982628095612145099487170124451646126037
9029309120889086942028510640182154399457156805941872748998094254742173582401063677404595741785160829230135
3580818400969963725242305608559037006242712434169090041536901059339838357779394109700277534720000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000
]]]

[[[
1000 factorial / 999 factorial
> 1000
]]]

[[[
10 @ 100
(10 @ 100) x
> 10
(10 @ 100) y
>100
30
]]]

- Points!

- Points are created using @

- Puzzle

[[[
(10@100) + (20@100)
>30@200
]]]

!! Roadmap

-  Fun with characters, string, array

+>file://figures/LogoPharo.png+

!! $C $h $a $r $a $c $t $e $r

-  $F, $Q $U $E $N $T $i $N

!! space tab?!

- Character space
- Character tab
- Character cr

!! 'Strings'

- 'tiramisu'

!! Character

[[[
12 printString
> '12'
]]]

!! Strings are collections of chars

[[[
'Tiramisu' at: 1
> $T
41
]]]

!! A program! \-- finding the last char

!! A program! 

[[[
| str | 				local variable
str := 'Tiramisu'.			assignment
str at: str length 			message send
> $u
]]]

!! double ' to get one

[[[
'L''Idiot'
> one string
]]]

!! For concatenation use ,

[[[
'Calvin' , ' & ', 'Hobbes'
> 'Calvin & Hobbes'
]]]

!! Symbols: #Pharo

- #Something is a symbol
- Symbol is a unique string in the system
[[[
#Something == #Something
> true
]]]

!! "Comment"

- " what a fun language lecture. I really liked the desserts"

!!! #(Array)

[[[
#('Calvin' 'hates' 'Suzie') size
> 3
]]]

!! First element starts at I 

[[[
#('Calvin' 'hates' 'Suzie') at: 2
> 'hates'
]]]

!! at: to access, at: put: to set

[[[
#('Calvin' 'hates' 'Suzie') at: 2 put: 'loves'
]]]

!! #(Array)

[[[
#('Calvin' 'hates' 'Suzie') at: 2 put: 'loves'
> #('Calvin' 'loves' 'Suzie')
]]]

!! Syntax Summary
[[[
comment:		"a comment"
character:		$c $h $a $r $a $c $t $e $r $s $# $@
string:			'a nice string' 'lulu' 'l\''idiot' 
symbol:			#mac #\+
array:			#(1 2 3 (1 3) $a 4)
byte array:		#[1 2 3]
integer:		1, 2r101
real:			1.5, 6.03e-34,4, 2.4e7
fraction:		1/33
boolean:		true, false
point:			10@120
]]]

!! Roadmap

- Fun with keywords-based messages

+>file://figures/LogoPharo.png+

!! Keyword-based messages

- arr at: 2 put: ‘loves’
- somehow like arr.atput(2,‘loves’)

!! From Java to Smalltalk

- postman.send(mail,recipient);

!! From Java to Smalltalk

- postman.send(mail,recipient);

!! Removing unnecessary

- postman send mail recipient

!! But without losing information

- postman send mail to recipient

- postman send: mail to: recipient
[[[
postman.send(mail,recipient);
]]]
- The message is send:to:

!! Roadmap

-  Fun with variables

+>file://figures/LogoPharo.png+

!! Shared or Global starts with Uppercase
[[[
Transcript cr .
Transcript show: ‘hello world’.
Transcript cr .
]]]

!! local or temps starts with lowercase
[[[
| str |
str := ‘Tiramisu’
]]]

!! self, super, true, false, nil

- self = this
- super
- true, false are for Booleans
- nil is UndefinedObject instance

!! self, super, true, false, nil

- self = this in Java
- super
- true, false are for Booleans
- nil is UndefinedObject instance

!! Roadmap

-  Fun with classes

+>file://figures/LogoPharo.png+

!! A class definition!
[[[
Superclass subclass: #Class
instanceVariableNames: 'a b c'
...
category: 'Package name'
]]]

!! A class definition!

[[[
Object subclass: #Point
instanceVariableNames: 'x y'
classVariableNames: ''
poolDictionaries: ''
category: 'Graphics-Primitives'
]]]

!! Roadmap

-  Fun with methods

+>file://figures/LogoPharo.png+

!! On Integer
[[[
asComplex
"Answer a Complex number that represents value of
the the receiver."
^ Complex real: self imaginary: 0
]]]

!! On Boolean
[[[
xor: aBoolean
"Exclusive OR. Answer true if the receiver is not
equivalent to aBoolean."
^(self == aBoolean) not
]]]

!! Summary

- self, super
- can access instance variables
- can define local variable | ... |
- Do not need to define argument types
- ^ to return

!! Roadmap

-  Fun with messages

+>file://figures/LogoPharo.png+

[[[
1 class
	> SmallInteger
]]]

[[[
false not
> true
]]]

[[[
Date today
> 24 May 2009
]]]

[[[
Time now
> 6:50:13 pm
]]]

[[[
Float pi
> 3.141592653589793
]]]

- We sent messages to objects or classes!
[[[
1 class
Date today
]]]

!! Roadmap

-  Fun with binary messages

+>file://figures/LogoPharo.png+

!! aReceiver aSelector anArgument

- Used for arithmetic, comparison and logical operations
- One or two characters taken from:
-- \+ \- \/ \\ \* \~ \< \> \= \@ \% \| \& \! \? \,















































































































