{
  "title":"Inheritance and Lookup",
  "subtitle":"2: Lookup",
  "slidesid" : "W4S02"
}

${slide:title=Goal}$

- Understanding 
-- message passing 
-- method lookup
-- ==self== semantics

${slide:title=Inheritance}$

- Inheritance of state is static
- Inheritance of behavior is dynamic

${slide:title=Message Sending}$

${columns}$

${column:width=50}$

""Sending"" a ""message"" is a two-step process:
# ""look up"" the ""method"" matching the message
# execute this method on the ""receiver""

${column:width=50}$

+>file://figures/InheritanceDiagram-sendingMessage.png|width=140+

${endColumns}$


${slide:title=Method Lookup}$

${columns}$

${column:width=50}$

The lookup starts in the ""class"" of the ""receiver"" then:
- if the method is defined in the class, it is returned
- otherwise the search continues in the superclass

${column:width=50}$

+>file://figures/InheritanceDiagram-lookupTwoStages.png|width=140+

${endColumns}$

${slide:title=Some Lookup Cases}$

Sending the message ==color== to ==a ColoredRectangle==

+>file://figures/InheritanceDiagram-lookup-superclass.png|width=50+

${slide:title=Some Lookup Cases}$

Sending the message ==area== to ==a ColoredRectangle==

+>file://figures/InheritanceDiagram-lookup-superclass.png|width=50+

${slide:title=self Always Represents the Receiver}$

+>file://figures/LookupWithSelfInSuperclassMethod.png|width=76+

[[[
    A new foo
    > ...
    B new foo
    > ...
]]]

${slide:title=self Always Represents the Receiver}$

+>file://figures/LookupWithSelfInSuperclassMethod.png|width=76+

[[[
    A new foo
    > 10
    B new foo
    > 50
]]]

${slide:title=What is self/this?}$

Take 5 min and write the definition of ==self== (==this== in Java).

- Your definition should have two points:
-- What does ==self== represent?
-- How are the methods looked up when a message is sent to ==self==?

${slide:title=self/this}$

- ==self== represents the receiver of the message
- ==self== in Pharo, ==this== in Java
- The method lookup starts in the class of the receiver

${slide:title=self Always Represents the Receiver}$

+>file://figures/LookupWithSelfInSuperclassMethod.png|width=76+

[[[
    A new bar
    > ...
    B new bar
    > ...
]]]

${slide:title=self Always Represents the Receiver}$

+>file://figures/LookupWithSelfInSuperclassMethod.png|width=76+

[[[
    A new bar
    > 10
    B new bar
    > 50
]]]

${slide:title=self Always Represents the Receiver}$

${columns}$

${column:width=35}$

+>file://figures/LookupWithSelfInSuperclassMethod.png|width=110+

[[[
    B new bar
    > 50
]]]

${column:width=65}$

#==B new bar==: no method ==bar== defined in ==B==
#look up in ==A== - the method ==bar== is found
#method ==bar== is executed
#==self== refers to the object
#==foo== is sent to ==self==
#look up ==foo== in the receiver's class: ==B==!
#==foo== is found there and executed

${endColumns}$

${slide:title=self Always Represents the Receiver}$

${columns}$

${column:width=60}$

+>file://figures/LookupWithSelfInSuperclassMethodThreeClasses.png|width=100+

${column:width=40}$

[[[
    A new bar
    > ...
    B new bar
    > ...
    C new bar
    > ...
]]]

${endColumns}$

${slide:title=self Always Represents the Receiver}$

${columns}$

${column:width=60}$

+>file://figures/LookupWithSelfInSuperclassMethodThreeClasses.png|width=100+

${column:width=40}$

[[[
    A new bar
    > 10
    B new bar
    > 10
    C new bar
    > 50
]]]

${endColumns}$

${slide:title=What You Should Know}$


-==self== ""always"" represents the receiver
- Sending a message is a two-step process:
-# Look up the method matching the message
-# Execute this method on the ""receiver""

% Local Variables:
% compile-command: "cd ../.. && ./compile.sh --to='Beamer' Slides/4-Done/InheritanceAndLookup-2-Lookup.pillar"
% End:
