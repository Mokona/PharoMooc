{
	"title":"Stream Overview"
}

${slide:title=Stream|label=arrays}$

- Associated with a collection
- Allows the traversal and construction of a collection
- Stores the current position

+>file://figures/StreamsTraversal.png+


${slide:title=API overview|label=api}$

- Adding: ==nextPut:==, ==nextPutAll:== (==<<==)
- Accessing: ==next==
- All contents: ==contents==
- Creation: ==on:==

Convenient messages:

- ==readStream==, ==writeStream==
- ==streamContents: [:s | ]==

${slide:title=API overview|label=api}$
[[[language=smalltalk
    |st|
    st := ReadWriteStream on: (Array new: 6).
    st nextPut: 1.
    st nextPutAll: #(4 8 2 6 7).
    st contents. 
    > #(1 4 8 2 6 7)
    st reset.
    st next.
    > 1
    st position: 3. 
    st next. 
    > 2
	
    st := (1 2 5 3 7) readStream.
    st next. 
    > 1
]]]

${slide:title=Adding elements|label=api}$

- ==nexPut:==, ==nextPutAll:==

[[[language=smalltalk
    |st|
    st := ReadWriteStream on: (Array new: 6).
    st nextPut: 1.
    st nextPutAll: #(4 8 2 6 7).
]]]



${slide:title=Nicer creation API|label=api}$

[[[language=smalltalk
    | s |
    s := WriteStream on: (String new: 16).
    self printOn: s.
    s contents
]]]

is equivalent to

[[[language=smalltalk
    String streamContents: [:s | self printOn: s]
]]]

${slide:title=Nicer adding API|label=api}$

Some people prefer ==<<== to ==nextPutAll:==

[[[language=smalltalk
printOn: aStream
	aStream
		print: self label;
		<< '->';
		<< (self value printStringLimitedTo: 50)
]]]


${slide:title=printOn|label=api}$

[[[language=smalltalk
Node>>printOn: aStream
	super printOn: aStream.
	aStream nextPutAll: ' with name:'; print: self name.
	self hasNextNode 
		ifTrue: [ aStream 
					nextPutAll: ' and next node:'; 
					print: self nextNode name ]
]]]

${slide:title=Summary|label=api}$

- Streams offers a simple API. 
- Basis for many manipulation of collection of objects

In the near future 
- more composable streams
- more generic implementation



