{
  "title":"Stream Overview"
}

${slide:title=What you will learn}$

- How to create streams
- How to add and get contents of streams

${slide:title=Streams}$

- Associated with a collection
- Allows the traversal and construction of a collection
- Stores the current position

+>file://figures/StreamsTraversal.png+


${slide:title=API overview}$

- Adding: ==nextPut: anElement==, ==nextPutAll: aCollection==
- Accessing: ==next==
- Get all contents: ==contents==
- Creation: ==on:==

Convenient messages:

- ==readStream==, ==writeStream==
- ==streamContents: [:s | ]==

${slide:title=API overview}$
[[[
  | st |
  st := ReadWriteStream on: (Array new: 6).
  st nextPut: 1.
  st nextPutAll: #(4 8 2 6 7).
  st contents. 
  > #(1 4 8 2 6 7)
  st reset.
  st next.
  > 1
  st position: 3. 
  st next. 
  > 2
  
  st := (1 2 5 3 7) readStream.
  st next. 
  > 1
]]]

${slide:title=Adding elements}$

- ==nexPut:==, ==nextPutAll:==

[[[
  | st |
  st := ReadWriteStream on: (Array new: 6).
  st nextPut: 1.
  st nextPutAll: #(4 8 2 6 7).
]]]



${slide:title=Nicer creation API|label=api}$

[[[language=smalltalk
  | s |
  s := WriteStream on: (String new: 16).
  self printOn: s.
  s contents
]]]

is equivalent to

[[[
  String streamContents: [:s | self printOn: s]
]]]

${slide:title=Nicer adding API}$

Some people prefer ==<<== to ==nextPutAll:==

[[[
printOn: aStream
  aStream
    print: self label;
    << '->';
    << (self value printStringLimitedTo: 50)
]]]

${slide:title=What you should know}$

- Streams offers a simple API. 
- Basis for many manipulation of collection of objects
- Basic API





