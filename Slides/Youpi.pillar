! Syntax and Messages

StÃ©phane Ducasse
stephane.ducasse@inria.fr
http://stephane.ducasse.free.fr/

!! Outline

- Literals: numbers, strings, arrays....
- Variable, assignments, returns
- Pseudo-variables
- Message Expressions	 	
- Block expressions
- Conditional and Loops

!! Originally Made for Kids

- Read it as a non-computer-literate person:
[[[		
| bunny |
bunny := Actor fromFile: 'bunny.vrml'.
bunny head doEachFrame:
	[ bunny head
		pointAt: (camera
			transformScreenPointToScenePoint:
				(Sensor mousePoint)
				using: bunny)
		duration: camera rightNow ]
]]]

!! Numbers

- SmallInteger, Integer,
-- 4, 2r100 (4 in base 2),3r11 (4 in base 3), 1232
- Automatic coercion
-- {{{ 1 + 2.3 -> 3.3 }}}
- 1 class -> SmallInteger
-- 1 class maxVal class -> SmallInteger
- {{{ (1 class maxVal + 1) class -> LargeInteger }}}
-- Fraction, Float, Double
- 3/4, 2.4e7, 0.75d
-- {{{ (1/3) + (2/3) -> 1}}}
- 1000 factorial / 999 factorial -> 1000
-- {{{ 2/3 + 1 -> (5/3)}}}

!! Characters

- Characters:
-- $F, $Q $U $E $N $T $i $N
- Unprintable characters:
-- Character space, Character tab, Character cr

!! Strings

- Strings:
-- #mac asString -> 'mac'
-- 12 printString -> '12'
-- 'This packet travelled around to the printer' 'l'idiot'
-- String with: $A
-- Collection of characters
-- 'lulu' at: 1 -> $l
- To introduce a single quote inside a string, just double it.

!! Symbols

Symbols:
- #class #mac #at:put: {{{#+ }}} #accept:
-- Kinds of String
-- Unique in the system (see after)

!! Symbols vs. Strings

- Symbols are used as method selectors, unique keys for dictionaries
- A symbol is a read-only object, strings are mutable objects
- A symbol is unique, strings are not
[[[
 #calvin == #calvin PrIt-> true
 'calvin' == 'calvin' PrIt-> false
 #calvin, #zeBest PrIt-> 'calvinzeBest'
 ]]]
- Symbols are good candidates for identity based dictionaries (IdentityDictionary)
- Hint: Comparing strings is slower then comparing symbols by a factor of 5 to 10. However, converting a string to a symbol is more than 100 times more expensive.

!! Comments and Tips

- "This is a comment"
- A comment can span several lines. Moreover, avoid putting a space between the " and the first character. When there is no space, the system helps you to select a commented expression. You just go after the " character and double click on it: the entire commented expression is selected. After that you can printIt or doIt, etc.

!! Arrays

- #(1 2 3) #('lulu' (1 2 3))
[[[#('lulu' #(1 2 3))]]]
-  #(mac node1 pc node2 node3 lpr)
-- an array of symbols.
- When one prints it it shows
[[[#(#mac #node1 #pc #node2 #node3 #lpr)]]]
- in VW Byte Array #[1 2 255]

!! Arrays

- Heterogenous
[[[
 #('lulu' (1 2 3))
	PrIt-> #('lulu' #(1 2 3))
 #('lulu' 1.22 1)
	PrIt-> #('lulu' 1.22 1)
]]]
- An array of symbols:
[[[
#(calvin hobbes suzie)
	PrIt-> #(#calvin #hobbes #suzie)
]]]
- An array of strings:
[[[
#('calvin' 'hobbes' 'suzie')
	PrIt-> #('calvin' 'hobbes' 'suzie')
]]]

!! Syntax Summary

- comment: "a comment"
- character: $c $h $a $r $a $c $t $e $r $s $# $@
- string: 'a nice string' 'lulu' 'l'idiot'
- symbol: #mac #+
- array: #(1 2 3 (1 3) $a 4)
- byte array: #[1 2 3]
- integer: 1, 2r101
- real: 1.5, 6.03e-34,4, 2.4e7
- float: 1/33
- boolean: true, false
- point: 10@120
- Note that @ is not an element of the syntax, but just a message sent to a number. This is the same for /, bitShift, ifTrue:, do: ...

!! Roadmap

- Literals: numbers, strings, arrays....
- Variable, assignments, returns
- Pseudo-variables		
- Message Expressions	 	
- Block expressions
- Conditional and Loops


