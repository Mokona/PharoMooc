{
    "title":"Understanding Messages",
	 "slidesid" : "W2S01"
}

${slide:title=Reminder|label=objectives}$

- we only manipulate ""objects"" (mouse, booleans, arrays, numbers, strings, ...)
- we only send them ""messages"" (@, \+, not, getPng:, ifTrue:ifFalse:, new, ...)
- and we use ""closures""

${slide:title=Syntax}$

- Originally invented for kids 
- Programs look like little sentences
- Try to minimize the number of parentheses

${slide:title=Example}$

[[[
(ZnEasy getPng: 'http://a.tile.openstreetmap.org/8/126/87.png' asZnUrl) 
    asMorph openInWindow
]]]

${slide:title=Three Kinds of Messages}$

- Unary
-- ==1 class==, ==Browser open== 

- Binary (operators like)
-- ==1\+2==, ==x ~~ nil==

- Keyword-based: 
-- ==2 between: 0 and: 5==

${slide:title=A Glimpse at Message Precedence}$

- (Msg) \> Unary \> Binary \> Keywords

- First we execute ==()==
- Then unary, then binary and finally keyword messages
- Minimize ==()== needs

But let us start with messages


${slide:title=Guess!}$

- ==1 log==
- ==Browser open== 
- ==2 raisedTo: 5==
- =='hello', 'world'==
- ==10@20==
- ==point1 x==
- ==point1 distanceFrom: point2==

${slide:title=Guess}$

- ==1 log== (unary)
- ==Browser open== (unary)
- ==2 raisedTo: 5== (keyword)
- =='hello', 'world'== (binary)
- ==10@20== (binary)
- ==point1 x== (unary)
- ==point1 distanceFrom: point2== (keyword)


${slide:title=Unary Message Examples}$

[[[
    anObject aSelector
]]]


[[[
    1 class
    > SmallInteger
]]]

[[[
    false not
    > true
]]]

[[[
    Date today
    > 24 May 2009
]]]

[[[
    Float pi
    > 3.141592653589793
]]]

${slide:title=Did you notice?}$

- We sent messages to any objects, including classes!
- There is no difference between sending a message to an object or to a class

[[[
    1 class
    > SmallInteger
]]]

[[[
    Date today
    > 27 June 2015
]]]

[[[
    Point selectors
    > #(#x #theta #quadrantOf: #onLineFrom:to:within: #bitShiftPoint: #< #scaleFrom:to: #sideOf: #'\\' #scaleTo: #grid: #'//' #asIntegerPoint #directionToLineFrom:to: ...) 
]]]

- Returns all the messages the class understand


${slide:title=A little query}$

- Let us query the system and only filter the unary messages:

[[[
    Point selectors select: #isUnary  
    > #(#x #theta #asIntegerPoint #r #negated #normalized #sign #degrees #isIntegerPoint #guarded #fourNeighbors #eightNeighbors #min #max #ceiling #normal #asPoint #y #abs #isPoint #angle #transposed #reciprocal #asFloatPoint #asNonFractionalPoint #rounded #leftRotated #floor #truncated #hash #deepCopy #fourDirections #rightRotated #isSelfEvaluating #asMargin #isZero)
]]]

- ==select:== is an iterator (see following lecture)
- Easy :-)


${slide:title=Binary Messages}$

[[[
    anObject aBinarySelector anArgument
]]]

- Used for arithmetic, comparison and logical operations
- One, two or three characters taken from:
-- \+ \- \/ \\ \* \~ \< \> \= \@ \% \| \& \! \? \,


${slide:title=Binary Message Examples}$

[[[language=Smalltalk
    1 + 2
    > 3
]]]

[[[language=Smalltalk
    2 > 3
    > false
]]]

[[[language=Smalltalk
    10@200 
    > 10@200
]]]

[[[language=Smalltalk
    'Black chocolate' , ' is good'
    > 'Black chocolate is good'
]]]


${slide:title=Keyword Messages}$

[[[language=Smalltalk
    anObject keyword1: argument1 keyword2: argument2
]]]    

equivalent to:

[[[language=Smalltalk
    receiver.keyword1keyword2(argument1, argument2)
]]]


${slide:title=Message setX:}$

[[[language=Smalltalk
    10@20 setX: 2
    > 2@20
]]]

- We change the x value of the receiver (a point)
- No parentheses required

${slide:title=Message at:put:}$


[[[language=Smalltalk
    #('Calvin' 'hates' 'Suzie') at: 2 put: 'loves'
    > #('Calvin' 'loves' 'Suzie')
]]]

- ==#(...)== creates an array
- ==at:put:== changes the value of the array element.
- arrays start at 1 in Pharo (i.e., first element is at index 1)


${slide:title=Message between:and:}$

[[[language=Smalltalk
    12 between: 10 and: 20
    > true
]]]

- The message ==between:and:== is sent to an integer
- Takes two arguments ==10== and ==20==


${slide:title=New Quizz}$

- ==1 log==
- ==Browser open== 
- ==2 raisedTo: 5==
- =='hello', 'world'==
- ==10@20==
- ==point1 x==
- ==point1 distanceFrom: point2==

${slide:title=Summary}$

- Three kinds of messages: unary, binary and keywords
- Unary
-- ==5 factorial==
- Binary
-- ==2 + 3==
- Keywords-based messages
-- ==2 between: 0 and: 10==
