{
    "title":"Understanding Messages: Sequence et Cascade"
}


${slide:title=Message Sequence}$

[[[
    message1.
    message2.
    message3
]]]

- ==.== is a separator, not a terminator, no need to put one at the end

[[[
    | macNode pcNode |
    macNode := Workstation withName: #mac.
    [...]
]]]

- no point after temp. variable declaration

${slide:title=Multiple Messages to an Object}$

[[[
    Transcript cr.
    Transcript show: 1.
    Transcript show: 2.
]]]

is equivalent to:

[[[
    Transcript
        cr ;
        show: 1 ;
        show: 2
]]]

- sending multiple messages to the same object with ==;== is called a ""cascade""
- ==cr==, ==show: 1== and ==show: 2== are sent to ==Transcript==
- the cascade returns the last message return value

${slide:title=A Puzzle}$

We add 2 to a set
[[[
   Set new add: 2
   > 2
]]]

We get 2 and not the set

${slide:title=A puzzle}$

[[[
Set>>add: newObject
   "Include newObject as one of the receiver's elements, but only if not already present. Answer newObject."
   [...]
   ^ newObject
]]]

The method ==add:== returns its argument, not the receiver

${slide:title=A puzzle}$

To get the collection back, we can use a temporary variable

[[[
   | s |
   s := Set new.
   s add: 1; add: 2.
   s
]]]

Do you see another solution?

${slide:title=One Hint}$

What if we get a message that returns the receiver?

${slide:title=yourself}$

[[[
Object>>yourself
   ^ self
]]]

${slide:title=A Puzzle: Solution}$

[[[
   | s |
   s := Set new.
   s add: 1; add: 2.
   s
]]]

is equivalent to

[[[
   Set new
      add: 1;
      add: 2;
      yourself
   > aSet 
]]]

- ==add:== and ==yourself== are sent to the new ==Set==
- the cascade returns the return value of ==yourself==

${slide:title=What you should Know}$

- ==.== is a separator
- ==;== (cascade) is useful to avoid repeating the receiver
- the cascade returns the last message return value

% Local Variables:
% compile-command: "cd ../.. && ./compile.sh --to=Beamer Slides/Week2/C019SD-W2S04-Messages-Sequence.pillar"
% End:
