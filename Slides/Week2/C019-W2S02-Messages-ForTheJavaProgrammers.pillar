{
    "title":"Messages for Java Programmers",
    "slidesid" : "W2S02"
}

${slide:title=Only Objects and Messages}$

Remember we ""only"" manipulate objects: mouse, booleans, arrays, numbers, compressed, strings, windows, scrollbars, canvas, files, trees, compiler, sound, url, socket, fonts, text, collections, stack, shortcut, streams, ...

and we send messages, messages, messages and messages (and closures)


${slide:title=Equivalence}$

In Java
[[[
    ArrayList<String> strings = new ArrayList<String>();
]]]

In Pharo
[[[
strings := ArrayList new.
]]]

- no static typing
- no generics

${slide:title=Equivalence}$

In Java
[[[language=java
Thread regThread = new Thread(
  new Runnable() {
    @Override
    public void run() {
      this.doSomething();
    }
  });
regThread.start();
]]]

In Pharo
[[[
[ self doSomething ] fork
]]]

${slide:title=Equivalence}$

In Java 8
[[[language=java
new Thread(() -> doSomething()).start();
]]]

In Pharo
[[[
[ self doSomething ] fork
]]]


${slide:title=Three Kinds of Messages}$

- Unary
[[[
5 factorial.
Transcript cr
]]]

- Binary
[[[
3 + 4
]]]

- Keyword-based
[[[
2 between: 0 and: 5.
Transcript show: 'hello world' ; cr
]]]



${slide:title=Keyword Messages}$

In Java
[[[language=java
    receiver.keyword1keyword2(argument1, argument2)
]]]

In Pharo
[[[
    anObject keyword1: argument1 keyword2: argument2
]]]

${slide:title=Keyword Messages for Java developers}$

In Java
[[[
    postman.send(mail,recipient);
]]]

${slide:title=Keyword Messages for Java developers}$

[[[
    postman.send(mail,recipient);
    postman . send ( mail , recipient );
]]]


${slide:title=Keyword Messages for Java developers}$

[[[
    postman.send(mail,recipient);
    postman . send ( mail , recipient );
    postman send mail recipient
]]]

${slide:title=Keyword Messages for Java developers}$

[[[
    postman.send(mail,recipient);
    postman . send ( mail , recipient );
    postman send mail recipient
    postman send mail to recipient
]]]

${slide:title=Keyword Messages for Java developers}$

[[[
    postman.send(mail,recipient);
    postman . send ( mail , recipient );
    postman send mail recipient
    postman send mail to recipient
    postman send: mail to: recipient
]]]


${slide:title=Keyword Messages for Java developers}$

In Java
[[[language=java
    postman.send(mail,recipient);
]]]

In Pharo
[[[
    postman send: mail to: recipient
]]]

- The message
-- is named ==send:to:==
-- is sent to ==postman==
-- includes two arguments (==mail== and ==recipient==)

${slide:title=Conditionals are just messages}$

- Booleans are objects
- Conditional expressions are messages sent to booleans or blocks

[[[
fullName isEmptyOrNil
   ifTrue: [ 'FirstnameLastname' translated ]
   ifFalse: [ fullName ]
]]]

${slide:title=Loops: Messages Sent to Objects}$

[[[
4 timesRepeat: [ self doSomething ]
]]]

[[[
0 to: 100 do: [ :i | ... ]
]]]

[[[
0 to: 100 by: 3 do: [ :i | ... ]
]]]

[[[
aCollection do: [ :each | ... ]
]]]

${slide:title=Summary}$

- Three kinds of messages: unary, binary and keywords
- () > unary > binary > keywords
- Conditionals are messages
- Loops too

% Local Variables:
% compile-command: "cd ../.. && ./compile1Slide.sh Slides/Week2/C019SD-W2S02-Messages-ForTheJavaProgrammers.pillar"
% End:
