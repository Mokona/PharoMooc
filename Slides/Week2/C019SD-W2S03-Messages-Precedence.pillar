{
"title":"Messages: Composition and Precedence"
}


${slide:title=Composition: from left to right!}$

- Remember: (Msg) \> Unary \> Binary \> Keywords
- What happens when we have two messages of the same kind?
- Execution from left to right
[[[
1000 factorial class name  
> 'LargePositiveInteger'
]]]

is equivalent to 

[[[
(((1000 factorial) class) name) 
]]]

- Ease the composition of messages


${slide:title=Back to Message Precedence}$

Remember that we have only messages

- (Msg) \> Unary \> Binary \> Keywords
- From left to right

${slide:title=Precedence Example}$

[[[
2 + 3 squared
> 2 + 9
> 11
]]]

- unary (squared) first then binary (==+==)

${slide:title=Precedence Example}$

[[[
2 raisedTo: 3 + 2
> 2 raisedTo: 5
> 32
]]]

- binary (==+==) first then keyword-based (==raisedTo:==)

${slide:title=Precedence Example}$

[[[
Color gray - Color white = Color black
> aGray - aWhite = aBlack
> aBlack = aBlack
> true
]]]

- Unary then binary from left to right

${slide:title=Precedence Example}$

[[[
1 class maxVal + 1 
> 1073741824
]]]

- unary, unary and binary

[[[
1 class
> SmallInteger

1 class maxVal
> 1073741823
	
1 class maxVal + 1
> 1073741824
	
(1 class maxVal + 1) class
> LargePositiveInteger
]]]


${slide:title=Getting the Pharo Logo|label=kids}$

[[[
(ZnEasy getPng: 'http://pharo.org/web/files/pharo.png') 
    asMorph openInWindow
]]]

- unary (==asZnUrl==), keyword (==getPng:==)
- then unary, unary


${slide:title=Parentheses take precedence!}$

[[[
(0@0 extent: 100@100) bottomRight
> (aPoint extent: anotherPoint) bottomRight
> aRectangle bottomRight
> 100@100
]]]

[[[
0@0 extent: 100@100 bottomRight
> Message not understood
> 100 does not understand bottomRight
]]]

${slide:title=The price for simplicity}$

- Only messages: ==+== 
-- is a message, no precedence
-- can be redefined in domain classes 
- Simple
- One limit: no mathematical precedence

${slide:title=No mathematical precedence}$

[[[
3 + 2 * 10
> 5 * 10
> 50
]]]

- should be rewritten using parentheses
[[[
3 + (2 * 10)
> 3 + 20
> 23
]]]

${slide:title=No mathematical precedence}$

[[[
1/3 + 2/3
> 7/3 /3
> 7/9
]]]
- should be rewritten using parentheses
[[[l
(1/3) + (2/3)
> 1
]]]

${slide:title=Summary}$

- Three kinds of messages: unary, binary and keywords
- () > unary > binary > keywords
- There is no mathematical precedence because operation are plain messages
- Arguments are placed inside message structure: 
-- 2 between: 0 and: 5 (the message is ==between:and:==)
- ==()== takes precedence over messages
