{
    "title":"Class and Method Definition"
}

${slide:title=Class Definition}$

[[[
Object subclass: #NameOfSubclass
    instanceVariableNames: ''
    classVariableNames: ''
    package: 'PackageName'
]]]

${slide:title=Example}$

[[[
Object subclass: #Point
    instanceVariableNames: 'x y'
    classVariableNames: ''
    package: 'Graphics'
]]]


${slide:title=Method Definition}$

[[[
Game >> initializePlayers
  super initializePlayers.
  self players
    at: 'tileAction'
    put: ( MITileAction director: self )
]]]

${slide:title=Methods return self by default}$

[[[
Game >> initializePlayers
  super initializePlayers.
  self players
    at: 'tileAction'
    put: ( MITileAction director: self )
  ^ self 
]]]


${slide:title=Typographical convention}$

When you edit a method, you do not type the class name:

[[[
dist: aPoint 
  "Answer the distance between aPoint and the receiver."
  | dx dy |
  dx := aPoint x - x.
  dy := aPoint y - y.
  ^ (dx * dx + (dy * dy)) sqrt
]]]

We show the class we are talking about using ==Point >>==

[[[
Point >> dist: aPoint 
  "Answer the distance between aPoint and the receiver."
  | dx dy |
  dx := aPoint x - x.
  dy := aPoint y - y.
  ^ (dx * dx + (dy * dy)) sqrt
]]]

${slide:title=Class Method}$

To define a class method, press the ""class side"" button
In books and lecture notes we add 'class'

${columns}$

${column:width=70}$

+.>file://figures/classSideMethod.png|width=110+

${column:width=80}$

[[[
Point class >> x: xInteger y: yInteger 
  "Answer an instance of me with coordinates xInteger and yInteger."

  ^ self basicNew setX: xInteger setY: yInteger
]]]

${endColumns}$



${slide:title=What you should know}$

- Classes are defined inside packages.
- Methods are public and virtual.
- By default a method returns the receiver.
- Class methods are just methods of the class.

