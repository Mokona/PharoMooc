{
    "title":"Class and Method Definition"
}

${slide:title=Class Definition}$

[[[
Object subclass: #NameOfSubclass
    instanceVariableNames: ''
    classVariableNames: ''
    package: 'PackageName'
]]]

${slide:title=Example}$

[[[
Object subclass: #Point
    instanceVariableNames: 'x y'
    classVariableNames: ''
    package: 'Graphics'
]]]


${slide:title=Looking at A Simple Method}$

[[[
factorial
  "Answer the factorial of the receiver."

  self = 0 ifTrue: [ ^ 1 ].
  self > 0 ifTrue: [ ^ self * (self - 1) factorial ].
  self error: 'Not valid for negative integers'
]]]

${slide:title=Within the Browser part of the Pharo IDE}$

+>file://figures/FactorialInBrowser.png|width=100+

${slide:title=Presentation Convention}$

[[[
factorial
  "Answer the factorial of the receiver."
  self = 0 ifTrue: [ ^ 1 ].
  self > 0 ifTrue: [ ^ self * (self - 1) factorial ].
  self error: 'Not valid for negative integers'
]]]

is displayed in this lecture as: 

[[[
Integer >> factorial
  "Answer the factorial of the receiver."
  self = 0 ifTrue: [ ^ 1 ].
  self > 0 ifTrue: [ ^ self * (self - 1) factorial ].
  self error: 'Not valid for negative integers'
]]]

- ""Integer >>"" is not part of the syntax:
-- it tells you the method's class



${slide:title=Remember Messages}$

[[[
Integer >> factorial
  "Answer the factorial of the receiver."

  self = 0 ifTrue: [ ^ 1 ].
  self > 0 ifTrue: [ ^ self * (self - 1) factorial ].
  self error: 'Not valid for negative integers'
]]]

- ==factorial== is the method name
- ==\===, ==>==, ==\*== and ==-== are binary messages
- ==^== is for returning a value
- ==factorial== is an unary message
- ==ifTrue:== and ==error:== are keyword messages sent to a boolean expression


${slide:title=Method Definition}$

[[[
Game >> initializePlayers
  super initializePlayers.
  self players
    at: 'tileAction'
    put: ( MITileAction director: self )
]]]

${slide:title=Methods Return self by Default}$

[[[
Game >> initializePlayers
  super initializePlayers.
  self players
    at: 'tileAction'
    put: ( MITileAction director: self )
  ^ self       "<-- this is optional"
]]]


${slide:title=Class Method}$

${columns}$

${column:width=60}$

+.>file://figures/classSideMethod.png|width=100+

${column:width=40}$

- press ==class side== to define a class method
- in lectures, we add ==class==

${endColumns}$

[[[
Point class >> x: xInteger y: yInteger 
  "Answer an instance of me with coordinates xInteger and yInteger."

  ^ self basicNew setX: xInteger setY: yInteger
]]]

${slide:title=What You Should Know}$

- Classes are defined inside packages
- Methods are public and virtual
- By default a method returns the receiver
- Class methods are just methods of the class

% Local Variables:
% compile-command: "cd ../.. && ./compile.sh --to=Beamer Slides/Week2/C019SD-W2S-ClassAndMethodDefinition.pillar"
% End:
