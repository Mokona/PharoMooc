! Processes and Concurrency in VW

- Stephane Ducasse
- stephane.ducasse@inria.fr
- *>http://stephane.ducasse.free.fr/*

!! License: CC-Attribution-ShareAlike 2.0

- *>http://creativecommons.org/licenses/by-sa/2.0/*

+>file://figures/CreativeCOmmons.png+

!! Processes & Concurrency in VW

- Processes in Smalltalk:
-- Class Process, Process States, Process Scheduling and Priorities
- Synchronization Mechanisms in Smalltalk:
-- Semaphores, Mutual Exclusion Semaphores,
- SharedQueues
- Delays
- Promises

!! Processes in Smalltalk: Process class

- Smalltalk supports multiple independent processes.
- Each instance of class Process represents a sequence of
actions which can be executed by the virtual machine
concurrently with other processes.
- Processes share a common address space (object memory)
- Blocks are used as the basis for creating processes
- [ Transcript cr; show: 5 factorial printString ] fork
- The new process is added to the list of scheduled
processes. This process is runnable (i.e., scheduled for
execution) and will start executing as soon as the current
process releases the control of the processor.

!! Process class

- We can create a new instance of class Process which
is not scheduled by sending the #newProcess message
to a block:
[[[
| aProcess |
aProcess := [ Transcript cr; show: 5 factorial printString ]
newProcess
]]]
- The actual process is not actually runnable until it
receives the #resume message.

!! Process states

- A process may be in one of the states:
- suspended, waiting, runnable, running, or terminated

+>file://figures/ProcessStates.png+

!! Process class

- A process can be created with any number of arguments:
[[[
aProcess :=
[ :n | Transcript cr; show: n factorial
printString ] newProcessWithArguments: #(5).
]]]
-- A process can be temporarily stopped using a suspend
message. A suspended process can be restarted later
using the resume message.

-- A process can be stopped definitely using a message terminate. Once a process has received the terminate.

!! Process Scheduling and Priorities

- Processes are scheduled by the unique instance of
class ProcessorScheduler called Processor.

- A runnable process can be created with an specific
priority using the forkAt: message:

[[[
[ Transcript cr; show: 5 factorial printString ]
	forkAt: Processor userBackgroundPriority
]]]

!! Process Scheduling and Priorities (VW)

- Process scheduling is based on priorities associated to processes.
- Processes of high priority run before lower priority.
- Priority values go between 1 and 100.
- Eight priority values have assigned names.


|!Priority |Name |Purpose
|100 |timingPriority |Used by Processes that are dependent on real time
|98 |highIOPriority |Used by time-critical I/O
|90 |lowIOPriority |Used by most I/O Processes
|70 |userInterruptPriority |Used by user Processes desiring immediate service
|50 |userSchedulingPriority |Used by processes governing normal user interaction
|30 |userBackgroundPriority |Used by user background processes
|10 |systemBackgroundPriority |Used by system background processes
|1 |systemRockBottonPriority |The lowest possible priority

!! In Squeak

- SystemRockBottomPriority := 10.
- SystemBackgroundPriority := 20.
- UserBackgroundPriority := 30.
- UserSchedulingPriority := 40.
- UserInterruptPriority := 50.
- LowIOPriority := 60.
- HighIOPriority := 70.
- TimingPriority := 80.

!! In VW

- The priority of a process can be changed by using a #priority: message
[[[
| process1 process2 |
Transcript clear.
process1 := [ Transcript show: ‘first’] newProcess.
process1 priority: Processor systemBackgroundPriority.
process2 := [ Transcript show: ‘second’ ] newProcess.
process2 priority: Processor highIOPriority.
process1 resume.
process2 resume.
]]]
- The default process priority is userSchedulingPriority (50)

!! Process Scheduling Algorithm

- The active process can be identified by the expression: Processor activeProcess
- The processor is given to the process having the highest priority.
- A process will run until it is suspended, terminated or preempted by a higher priority process, before giving up the processor.
- When the highest priority is held by multiple processes, the active process can give up the processor by