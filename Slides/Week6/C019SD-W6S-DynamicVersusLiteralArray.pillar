{
  "title":"Dynamic Vs. Literal Arrays"
}

${slide:title=What you Will Learn}$

- Literal arrays are not created using messages
- Dynamic arrays are created at runtime using messages

${slide:title=Literal Arrays}$

[[[
  #('Calvin' 'hates' 'Suzie') size
  > 3
]]]

is equivalent to 

[[[
  ((Array new: 3) 
      at: 1 put: 'Calvin'; 
      at: 2 put: 'hates'; 
      at: 3 put: 'Suzie') size
  > 3
]]]

${slide:title=Literal Arrays}$

Literal arrays contain objects that have a textual (literal) representation: numbers, strings, nil, symbols

[[[
  #(45 'milou' 1300 true #tintin)
  > #(45 'milou' 1300 true #tintin)
]]]

Literal are instances of the class ==Array==

[[[
  #(45 38 1300 8) class
  > Array
]]]


${slide:title=Literals Arrays are Array Instances}$

Literal arrays are equivalent to a dynamic version

A literal array
[[[
  #(45 38 1300 8) 
  > #(45 38 'milou' 8) 
]]]

An array
[[[
  Array with: 45 with: 38 with: 'milou' with: 8
  > #(45 38 'milou' 8) 
]]]











${slide:title=Dynamic Array Short Syntax}$

Defining array is tedious 
[[[
  | array | 
  array := (Array new: 2). 
  array 
     at: 1 put: 10 @ 10 ; 
     at: 2 put: (Point x: 10 y: 20).
   array
]]]

=={ element1 . element2 }== is syntactic sugar to create arrays

[[[
  {(10@20) . (10@20)}
  {Point x: 10 y: 20 . Point x: 10 y: 20}
]]]

${slide:title=Literal Array Creation Time}$

Literal arrays are created by the parser: when the expression is read, i.e. when the method is compiled, not the method is executed.

[[[
  | a |
  a := 12.
  #(a 13) 
  > #(#a 13)
]]]

Dynamic arrays are created during execution
[[[
  | a |
  a := 12.
  {a . 13} 
  > #(12 . 13)
]]]



${slide:title= Literal vs Dynamic}$

=={}== executes expressions while ==#()== not.
  
[[[
  {(10@20) . (10@20)} size 
  > 2
 
  #((10@20) . (10@20)) size 
  > 3
]]]

[[[
  {(10@20) . (10@20)}
  > {(10@20) . (10@20)}
  
  #((10@20) . (10@20))
  > #(#(10 #@ 20) #'.' #(10 #@ 20))
]]]




${slide:title= No Message Execution in Literal Array}$

There is no message executed when a literal array is created. 
[[[
  #(45 + 38 1300 8) 
  > #( 45 #+ 38 1300 8)
]]]

Arrays created with message sends are created during program execution.
[[[
  Array with: 45 + 38 with: 1300 with: 8
  > #( 83 . 1300 . 8)

  { 45 + 38 . 1300 . 8 }
  > #( 83 . 1300 . 8)
]]]

${slide:title=Nested Arrays}$

==()== inside a literal array produces a nested literal array

[[[
  #((10@20) (100@200))
  > #(#(10 #@ 20) #(100 #@ 200))
]]]

[[[
  #((10@20) . (100@200)) first class
  > Array
]]]

${slide:title=Summary}$

- Only one kind of Arrays
- Three ways
-- Literal syntax: ==#( )== 
-- Dynamic =={ . . } == 
-- Using messages ==Array new: 3== 
