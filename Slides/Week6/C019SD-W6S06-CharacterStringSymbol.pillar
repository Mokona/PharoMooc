{
	"title":"Characters, Strings and Symbols"
}

${slide:title=What You Will Learn}$

- Characters
- Strings: a collection of characters
- Symbols: unique strings

${slide:title=Characters}$

- Characters:
-- ==$F==, ==$Q== ==$U== ==$E== ==$N== ==$T== ==$i== ==$N==
- Unprintable characters:
-- ==Character space==, ==Character tab==, ==Character cr==


${slide:title=\'Strings\'}$

Delimited by =='==
[[[
	'eclair au chocolat'	
]]]

[[[
	'eclair au chocolat' size
	> 18
]]]
 
[[[
Character space split: 'eclair au chocolat' 
>  an OrderedCollection('eclair' 'au' 'chocolat')	
]]]

${slide:title=A string: a collection of characters}$

[[[
'eclair au chocolat' at: 1
> $e
]]]

[[[
'eclair au chocolat' do: [:each | Transcript show: each ; cr ]
]]]

${slide:title=Quote in Strings}$

- To add a quote in a string with just type it twice.
[[[
'L''eclair au chocolat' 
]]]

- Pay attention there is only one element 
[[[
'L''eclair au chocolat' at: 2
> $'

'L''eclair au chocolat' at: 3
> $e
]]]

${slide:title=Getting the last char}$

[[[
| str |
str := 'Tiramisu'.
str at: str length
> $u
]]]


${slide:title=For concatenation use ,}$

[[[
'Calvin' , ' & ', 'Hobbes'
> 'Calvin & Hobbes'
]]]


${slide:title= Take care with ,}$

- ==,== copies the strings so multiple concatenations can generate spurious versions

[[[
'Calvin' , ' & ', 'Hobbes'
> 'Calvin & Hobbes'
]]]

- Benchmark and if it is worth
- Use a stream to avoid creating multiple intermediary strings
[[[
String streamContents: [ :s |
  s 
    nextPutAll: 'Calvin';
    nextPutAll: ' & ';
    nextPutAll: 'Hobbes' 
  ]
]]]

${slide:title=Ways to obtain a string}$

[[[
#mac asString
> 'mac'
]]]

[[[
12 printString
>'12'
]]]

[[[
String with: $A
]]]

${slide:title=Symbols}$

- ==#calvin== is a symbol
- A kind of string
- Unique in the system (see after)
- Starts with ==#==
-- ==#class== ==#mac== ==#at:put:== ==#+== ==#accept:==


${slide:title=Symbols vs. Strings}$

- Symbols are used as method selectors, unique keys for dictionaries
- A symbol is a read-only object, a string is a mutable object
- Two symbols with the same representation points to the same object

[[[
#calvin == #calvin
> true
]]]

- Two strings with the same representation may be different objects depending on optimisations.
- Symbols are good candidates for identity based dictionaries (IdentityDictionary)

${slide:title=What You Should Know}$

- Strings are collection of characters
- Symbols are unique immutable strings
