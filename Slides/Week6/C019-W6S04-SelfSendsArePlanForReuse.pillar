{
  "title" : "Message Sends are Plans for Reuse",
  "slidesid" : "W6S04"
}

${slide:title=About This Lecture}$

Another design lecture:
- Next step of the ==not== implementation lecture
- Relevant to any object-oriented language
- May change your view on design

${slide:title=What You Will Learn}$

- Message sends are hooks for subclasses
- ''"I like big methods because I can see all the code"'' leads to bad design
- Why writing small methods is a sign of good design

${slide:title=Sending A Message Leads to a Choice}$

- a message send leads to a choice
- a class hierarchy defines the choices
- ==self== always represents the receiver
- method lookup starts in the class of the receiver

+>file://figures/Design-FatVsDispatch.png|width=95+

${slide:title=An Example}$

[[[
Node >> setWindowWithRatioForDisplay
   | avgRatio defaultNodeSize |
   avgRatio := 55.
   defaultNodeSize := mainCoordinate / maximizeViewRatio.
   self window add:
      (UINode new
         with: (bandWidth * avgRatio / defaultWindowSize).
   previousNodeSize := defaultNodeSize.
]]]

We want to change the ==defaultNodeSize== formula in a subclass

${slide:title=Duplication}$

Duplicate the code in a subclass

[[[
OurSpecificNode >> setWindowWithRatioForDisplay
  | avgRatio defaultNodeSize |
  avgRatio := 55.
  defaultNodeSize := (mainCoordinate / maximizeViewRatio) + 10.
  self window add:
      (UINode new
         with: (bandWidth * avgRatio / defaultWindowSize).
  previousNodeSize := defaultNodeSize.
]]]

${slide:title=Avoid Duplication}$

- if ==setWindowWithRatioForDisplay== uses private attributes (as in Java like languages), code duplication in subclasses is not even possible
- duplication is not a good practice:
-- copy bugs
-- fragile when original code changes (it ''will'' change)

${slide:title=Solution}$

${columns}$

${column:width=50}$

- send messages
- define small methods

Subclasses can override such methods

${column:width=50}$

+>file://figures/SelfIsDynamic.png|width=85+

${endColumns}$

${slide:title=Better Design}$

[[[
Node >> setWindowWithRatioForDisplay
   | avgRatio defaultNodeSize |
   avgRatio := 55.
   defaultNodeSize := self ratio.
   self window add:
      (UINode new
         with: (bandWidth * avgRatio / defaultWindowSize).
   previousNodeSize := defaultNodeSize.

Node >> ratio
   ^ mainCoordinate / maximizeViewRatio
]]]


${slide:title=Subclasses Reuse Superclass Logic}$

A subclass can refine the behavior

[[[
Node subclass: OurSpecificNode
   ...
]]]

[[[
OurSpecificNode >> ratio
   ^ super ratio + 10
]]]

${slide:title=Another Step}$

[[[
Node >> setWindowWithRatioForDisplay
   | avgRatio defaultNodeSize |
   avgRatio := 55.
   defaultNodeSize := self ratio.
   self window add:
      (UINode new
         with: (bandWidth * avgRatio / defaultWindowSize)).
   previousNodeSize := defaultNodeSize.
]]]

We can also extract the ==UINode== instantiation.

${slide:title=Another Step}$

[[[
Node >> setWindowWithRatioForDisplay
   | avgRatio defaultNodeSize |
   avgRatio := 55.
   defaultNodeSize := self ratio.
   self window add: self uiNode.
   previousNodeSize := defaultNodeSize.
]]]

[[[
Node >> uiNode
   ^ UINode new
      with: bandWidth * avgRatio / defaultWindowSize
]]]

${slide:title=Do Not Hardcode Class Use}$

[[[
Node >> uiNode
   ^ UINode new
      with: bandWidth * avgRatio / defaultWindowSize
]]]

${slide:title=Define Methods Returning Classes}$

[[[
Node >> uiNode
   ^ (self uiNodeClass new with: (bandWidth * avgRatio / defaultWindowSize).
]]]

[[[
Node >> uiNodeClass
   ^ UINodeClass
]]]

${slide:title=Many Small Messages}$

- Newbies often complain that there are too many small methods
- This is a good property

${slide:title=Avoid Magic Numbers}$

- Do not hardcode magic numbers (55)
- Either define instance variables with setter and getter, and/or set default value via message send

[[[
Node >> setWindowWithRatioForDisplay
   | avgRatio defaultNodeSize |
   avgRatio := 55.
   ...
]]]

${slide:title=Use Setter and Default}$

[[[
Node >> setWindowWithRatioForDisplay
  | avgRatio defaultNodeSize |
  avgRatio := self defaultAverageRatio.
  ...
]]]

[[[
Node >> defaultAverageRatio
   ^ 55
]]]

- With setter, clients may change the value without subclassing
[[[
aNode avgRatio: 55
]]]

${slide:title=The Pitch}$

- Code can be reused and refined in subclasses
- Sending a message in a class defines a ""hook"":
-- i.e., a place where subclasses can inject variations

${slide:title=Gruyere-Oriented Programming}$

+.>file://figures/gruyereWithSlogan|width=95+

${slide:title=Conclusion}$

- Each time you send a message you create a hook where the code of a subclass may be executed instead of yours.
- Prefer small methods over long ones because it forces you to create more methods, hence more hooks.

% Local Variables:
% compile-command: "cd ../.. && ./compile.sh --to=Beamer Slides/Week6/C019-W6S04-SelfSendsArePlanForReuse.pillar"
% End:
