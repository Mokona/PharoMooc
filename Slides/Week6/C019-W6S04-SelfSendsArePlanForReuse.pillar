{
  "title" : "Message sends are plans for reuse",
  "slidesid" : "W6S04"
}

${slide:title=About this lecture}$

Another design lecture:
- Natural next step of the NOT implementation lecture
- Relevant to any object-oriented language with dynamic binding
- May change your view on design :)

${slide:title=What You Will Learn}$

- Message sends are places where subclass code can be injected
- Why "I like big methods because I can see all the code" leads to bad design
- Why writing small methods is a sign of excellent design

${slide:title=Remember...}$

- Message passing is a choice operator
- Class hierarchies define choices
- ==self== always represents the receiver and method lookup starts in the class of the receiver

+One single class vs. a nice hierarchy.>file://figures/Design-FatVsDispatch.png|width=95+

${slide:title=The Pitch}$

- Superclass code can be reused by subclasses
- Sending messages in a class define places where subclass' code can be injected.

${slide:title=Gruyere-Oriented Programming}$

+.>file://figures/gruyereWithSlogan|width=95+

${slide:title=A First Example}$

[[[
Node >> setWindowWithRatioForDisplay
  | averageRatio defaultNodeSize |
  averageRatio := 55.
  defaultNodeSize := mainCoordinate /maximiseViewRatio.
  self window add:
    (UINode new with: (bandWidth * averageRatio / defaultWindowSize).
  previousNodeSize := defaultNodeSize.
]]]

- What if we want to change the ==defaultNodeSize== definition in our subclass?


${slide:title=A Not So Good Solution}$
- What if we cannot modify the code of ==Node==?
- Duplicate the code in our subclass

[[[
OurSpecificNode >> setWindowWithRatioForDisplay
  | averageRatio defaultNodeSize |
  averageRatio := 55.
  defaultNodeSize := (mainCoordinate /maximiseViewRatio) + 10.
  self window add:
      (UINode new with: (bandWidth * averageRatio / defaultWindowSize).
  previousNodeSize := defaultNodeSize.
]]]

${slide:title=Avoid Duplication}$

- If ==setWindowWithRatioForDisplay== uses private attributes (Java like languages), copying the code in subclass is not possible.
- Duplication is not a good practice:
-- copy bugs
-- fragile when original code will change (and it will change)
-- burden on us to keep the system running

${slide:title=Solution}$

${columns}$

${column:width=50}$

- Define small methods
- Send messages to invoke such methods
- Let subclasses customize such methods

${column:width=50}$

+>file://figures/SelfIsDynamic.png|width=85+

${endColumns}$



${slide:title=Good Design In The First Place}$

- Extract code into methods
- Call such methods
[[[
Node >> setWindowWithRatioForDisplay
  | averageRatio defaultNodeSize |
  averageRatio := 55.
  defaultNodeSize := self ratio.
  self window add:
        (UINode new with: (bandWidth * averageRatio / defaultWindowSize).
  previousNodeSize := defaultNodeSize.
]]]
[[[
    Node >> ratio
        ^ mainCoordinate /maximiseViewRatio
]]]


${slide:title=Subclasses Reuse Superclass Logic}$

Now a subclass can only express the delta and reuse the superclass logic
[[[
Node subclass: OurSpecificNode
  ...
]]]

[[[
OurSpecificNode >> ratio
  ^ super ratio + 10
]]]



${slide:title=Another Step}$

[[[
Node >> uiNode
  ^ (UINode new with: (bandWidth * averageRatio / defaultWindowSize)
]]]

[[[
Node >> setWindowWithRatioForDisplay
  | defaultNodeSize |
  self averageRatio: 55.
  defaultNodeSize := self ratio.
  self window add: self uiNode
]]]

${slide:title=Do Not Hardcode Class Use}$

[[[
Node >> uiNode
  ^ (UINode new with: (bandWidth * averageRatio / defaultWindowSize)
]]]

${slide:title=Define method returning classes}$

[[[
Node >> uiNode
  ^ (self uiNodeClass new with: (bandWidth * averageRatio / defaultWindowSize).
]]]

[[[
Node >> uiNodeClass
  ^ UINodeClass
]]]

${slide:title=Many Small Messages}$

- Newbies often complain that there are too many small methods
- This is a good property

${slide:title=Avoid Magic Numbers}$

- Do not hardcode magic numbers (55)
- Either define instance variables with setter and getter, and/or set default value via message send

[[[
Node >> setWindowWithRatioForDisplay
  | averageRatio defaultNodeSize |
  averageRatio := 55.
  ...
]]]

${slide:title=Use Setter and Default}$

[[[
Node >> setWindowWithRatioForDisplay
  | averageRatio defaultNodeSize |
  averageRatio := self defaultAverageRatio.
  ...
]]]

[[[
Node >> defaultAverageRatio
  ^ 55
]]]

- With setter, clients may change the value without subclassing
[[[language=smalltalk
    aNode averageRatio: 55
]]]

${slide:title=Conclusion}$

- Each time you send a message you create a hook where the code of a subclass may be executed instead of yours.
- Prefer small methods over long ones because it forces you to create more methods, hence more hooks.

% Local Variables:
% compile-command: "cd ../.. && ./compile.sh --to=Beamer Slides/Week6/C019-W6S04-SelfSendsArePlanForReuse.pillar"
% End:
