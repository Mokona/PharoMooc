{
  "title":"Variable Size Objects",
  "slidesid":"W7S2"
}

${slide:title=What You Will Learn}$

- How to define variable size objects
- How to instantiate variable size objects

${slide:title=Variable Size Instances?}$


[[[
(Array new: 10)
> #(nil nil nil nil nil nil nil nil nil nil)
]]]
[[[
Array new: 5
> #(nil nil nil nil nil)
]]]

Yes arrays can have different sizes


${slide:title=Variable Class Definition}$

- Messages ==variableSubclass:== instead of ==subclass:==
[[[
ArrayedCollection variableSubclass: #Array
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Collections-Sequenceable'
]]]


${slide:title=Variable Class Example }$


[[[
ArrayedCollection variableSubclass: #Array
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Collections-Sequenceable'
]]]

${slide:title=Variable Class}$

- Instances have a variable size (indexed) instance variable
- Indexed variable zone is implicitly added to the list of named instance variables
- Only one indexed instance variable per class


${slide:title=Index Access}$
- Access with ==at:== and ==at:put:==
- First element starts at 1
- ==size== returns the number of indexed instance variables
- Instantiated with ==new: max==

[[[
| a |
a := Array new: 4.
a at: 2 put: 'lulu'.
a at: 1
> nil
a at: 2 
> 'lulu'
]]]


${slide:title=Different Perspectives on Classes}$

- Named or indexed instance variables
[[[
Named: 'count' of class Counter
Variable/Indexed: Array
]]]

- Or looking at them in another way:
[[[
Objects with pointers to other objects
Objects with arrays of bytes (word, long)
]]]


${slide:title=Refining the Variable Part}$

|!Indexed |!Named |!Definition Method |!Examples
|No  |Yes |#subclass:... |Color|
|Yes |No | #variableSubclass: |AdditionalMethodState|
|Yes |No |#variableByteSubclass: |ByteString|
|Yes |No |#variableWordSubclass: |Bitmap|
Some methods related to class types: ==isPointers==, ==isBits==, ==isBytes==, ==isFixed==, ==isVariable==

${slide:title=Constraints}$

- Classes defined using ==#subclass:== can have any kind of subclasses
- Classes defined using ==#variableSubclass:== can only have ==variableSubclass:== subclasses


${slide:title=What You Should Know}$

- How to define variable size objects
- How to instantiate variable size objects


