{
  "title":"Understanding Metaclasses",
  "slidesid":"W7S3"
}



${slide:title=What You Will Learn}$

- Not needed to program in Pharo :)
- But intellectually exciting
-- Where ==new== is defined
-- What is the class of a metaclass
-- Uniformity of the instance reltionship

${slide:title=Only One Method Lookup}$

${columns}$

${column:width=60}$

When a message is sent to an object, a method is searched starting from the class of the object and following the inheritance chain

${column:width=40}$

+>file://figures/LookupEssenceWithGeneric.png|width=160+

${endColumns}$



${slide:title=Metaclasses in 7 Points}$


# Every object is an instance of a class
# Every class eventually inherits from ==Object==
# Every class is an instance of a metaclass
# The metaclass hierarchy parallels the class hierarchy
# Every metaclass inherits from ==Class== and ==Behavior==
# Every metaclass is an instance of ==Metaclass==
# The metaclass of ==Metaclass== is an instance of ==Metaclass==

${slide:title=Metaclasses in 7 Points}$


# ""Every object is an instance of a class""
# Every class eventually inherits from ==Object==
# Every class is an instance of a metaclass
# The metaclass hierarchy parallels the class hierarchy
# Every metaclass inherits from ==Class== and ==Behavior==
# Every metaclass is an instance of ==Metaclass==
# The metaclass of ==Metaclass== is an instance of ==Metaclass==

${slide:title=Every Object is an Instance of a Class}$

+>file://figures/01-SortedCollectionInstanceOfSortedCollection.png|width=100+


${slide:title=Metaclasses in 7 Points}$


# Every object is an instance of a class
# ""Every class eventually inherits from ==Object==""
# Every class is an instance of a metaclass
# The metaclass hierarchy parallels the class hierarchy
# Every metaclass inherits from ==Class== and ==Behavior==
# Every metaclass is an instance of ==Metaclass==
# The metaclass of ==Metaclass== is an instance of ==Metaclass==

${slide:title=Every Class Eventually Inherits From Object}$


+>file://figures/02-SortedCollectionInheritsFromObject.png|width=100+


${slide:title=Meaning of is-a}$

+>file://figures/03-SortedCollectionInheritsFromObjectLookup|width=95+


${slide:title=Responsibility of Object}$

Class ==Object== represents the common object behavior
- error handling, halting, announcements
- all classes should inherit from ==Object==


${slide:title=Metaclasses in 7 Points}$


# Every object is an instance of a class
# Every class eventually inherits from ==Object==
# ""Every class is an instance of a metaclass""
# The metaclass hierarchy parallels the class hierarchy
# Every metaclass inherits from ==Class== and ==Behavior==
# Every metaclass is an instance of ==Metaclass==
# The metaclass of ==Metaclass== is an instance of ==Metaclass==


${slide:title=Every class is an instance of a metaclass}$

Classes are objects too!
â€”  Every class X is the unique instance of its metaclass, called X class

+>file://figures/04-OrderedCollectionIsInstanceOfOrderedCollectionClass|width=120+





${slide:title=Metaclass are Implicit}$

Metaclasses are automatically created when creating a class


${slide:title=Metaclasses in 7 Points}$


# Every object is an instance of a class
# Every class eventually inherits from ==Object==
# Every class is an instance of a metaclass
# ""The metaclass hierarchy parallels the class hierarchy""
# Every metaclass inherits from ==Class== and ==Behavior==
# Every metaclass is an instance of ==Metaclass==
# The metaclass of ==Metaclass== is an instance of ==Metaclass==



${slide:title=Metaclass Hierarchy Parallels Class Hierarchy}$

+>file://figures/05-OrderedCollectionIsInstanceOfOrderedCollectionClassInherit|width=120+


${slide:title=Sending a Message to a Class}$

+>file://figures/06-OrderedCollectionIsInstanceOfOrderedCollectionClass|width=160+


${slide:title=Questions}$
- What is the class of a metaclass?
- What is the superclass of ==Object class==?
- What about sending a message to a metaclass?

+>file://figures/07-2Questions|width=110+




${slide:title=Metaclasses in 7 Points}$

# Every object is an instance of a class
# Every class eventually inherits from ==Object==
# Every class is an instance of a metaclass
# The metaclass hierarchy parallels the class hierarchy
# ""Every metaclass inherits from ==Class== and ==Behavior==""
# Every metaclass is an instance of ==Metaclass==
# The metaclass of ==Metaclass== is an instance of ==Metaclass==


${slide:title=Every Metaclass Inherits from Class and Behavior}$

+>file://figures/08-BehaviorClassDescriptionAndClass.png|width=110+

${slide:title=Where new is Defined?}$

+>file://figures/09-BehaviorClassDescriptionAndClassWithNew.png|width=110+



${slide:title=Responsibilities of Behavior}$

==Behavior==
- Minimum state for objects that have instances
- State:
-- class hierarchy link, method dictionary, description of instances (representation and number)
- Methods:
-- method dictionary, compiling method
-- instance creation (==new==, ==basicNew==, new:, basicNew:)
-- class hierarchy manipulation (==superclass:==, ==addSubclass:==) 
-- accessing (==selectors==, ==allSelectors==, ==compiledMethodAt:==, ==allInstances==, ==instVarNames==) 



${slide:title=Responsibilities of ClassDescription}$

==ClassDescription==
-  adds a number of facilities to basic ==Behavior==:
--  named instance variables
--  category organization for methods
--  the notion of a name (abstract)
--  maintenance of Change sets and logging changes
--  most of the mechanisms needed for fileOut
-  ==ClassDescription== is an abstract class: its facilities are intended for inheritance by the two subclasses, ==Class== and ==Metaclass==

${slide:title=Responsibilities of Class}$

==Class==
- represents the common behavior of all classes
--  name, compilation, method storing, instance variables ...
-  representation for classVariable names (==addClassVarName:==, ==initialize==)

${slide:title=Since Classes are Instances of Metaclasses}$
- Classes are Instances of Metaclasses
- Metaclass and class inheritance are parallel

+>file://figures/10-BehaviorClassDescriptionAndClassWithMetaclasses.png|width=110+

${slide:title=Metaclasses in 7 Points}$

# Every object is an instance of a class
# Every class eventually inherits from ==Object==
# Every class is an instance of a metaclass
# The metaclass hierarchy parallels the class hierarchy
# Every metaclass inherits from ==Class== and ==Behavior==
# ""Every metaclass is an instance of ==Metaclass==""
# The metaclass of ==Metaclass== is an instance of ==Metaclass==

${slide:title=Every Metaclass is an Instance of Metaclass}$

+>file://figures/11-BehaviorClassDescriptionAndClassWithMetaclassesInstanceOfMetaclass.png|width=120+
- ==Metaclass== inherits from ==ClassDescription==

${slide:title=Metaclass Responsibilities}$

==Metaclass==
-  Represents common metaclass ==Behavior==
-- instance creation (subclassOf:)
-- creating initialized instances of the metaclass's sole instance
-- initialization of class variables


${slide:title=Metaclasses in 7 Points}$

# Every object is an instance of a class
# Every class eventually inherits from ==Object==
# Every class is an instance of a metaclass
# The metaclass hierarchy parallels the class hierarchy
# Every metaclass inherits from ==Class== and ==Behavior==
# Every metaclass is an instance of ==Metaclass==
# ""The metaclass of ==Metaclass== is an instance of ==Metaclass==""

${slide:title=The metaclass of Metaclass is an Instance of Metaclass}$

+>file://figures/12-FullMetaclasses.png|width=130+



${slide:title=Observations}$

${columns}$

${column:width=70}$

- When programming we do not really care about that!
- Now The full graph is consistent
-- Any class can receive a message 
-- Only one message lookup

${column:width=30}$

+>file://figures/LookupEssenceWithGeneric.png|width=130+

${endColumns}$



${slide:What you Should Know}$

- Classes are objects and can be sent messages
- The process is ""exactly"" the same as for any other objects

