{
  "title":"Understanding Metaclasses",
  "slidesid":"W7S3"
}



${slide:title=What You Will Learn}$

- Not needed to program in Pharo :)
- But intellectually exciting
-- Where ==new== is defined
-- What is the class of a metaclass
-- Uniformity of the instance reltionship




${slide:title=Metaclasses in 7 Points}$


# Every object is an instance of a class
# Every class eventually inherits from ==Object==
# Every class is an instance of a metaclass
# The metaclass hierarchy parallels the class hierarchy
# Every metaclass inherits from ==Class== and ==Behavior==
# Every metaclass is an instance of ==Metaclass==
# The metaclass of ==Metaclass== is an instance of ==Metaclass==

${slide:title=Metaclasses in 7 Points}$


# ""Every object is an instance of a class""
# Every class eventually inherits from ==Object==
# Every class is an instance of a metaclass
# The metaclass hierarchy parallels the class hierarchy
# Every metaclass inherits from ==Class== and ==Behavior==
# Every metaclass is an instance of ==Metaclass==
# The metaclass of ==Metaclass== is an instance of ==Metaclass==

${slide:title=Every Object is an Instance of a Class}$

+>file://figures/01-SortedCollectionInstanceOfSortedCollection.png|width=100+


${slide:title=Metaclasses in 7 Points}$


# Every object is an instance of a class
# ""Every class eventually inherits from ==Object==""
# Every class is an instance of a metaclass
# The metaclass hierarchy parallels the class hierarchy
# Every metaclass inherits from ==Class== and ==Behavior==
# Every metaclass is an instance of ==Metaclass==
# The metaclass of ==Metaclass== is an instance of ==Metaclass==

${slide:title=Every Class Eventually Inherits From Object}$


+>file://figures/02-SortedCollectionInheritsFromObject.png|width=100+


${slide:title=Meaning of is-a}$

+>file://figures/03-SortedCollectionInheritsFromObjectLookup|width=95+


${slide:title=Responsibility of Object}$

Class ==Object== represents the common object behavior
- error handling, halting, announcements
- all classes should inherit from ==Object==


${slide:title=Metaclasses in 7 Points}$


# Every object is an instance of a class
# Every class eventually inherits from ==Object==
# ""Every class is an instance of a metaclass""
# The metaclass hierarchy parallels the class hierarchy
# Every metaclass inherits from ==Class== and ==Behavior==
# Every metaclass is an instance of ==Metaclass==
# The metaclass of ==Metaclass== is an instance of ==Metaclass==


${slide:title=Every class is an instance of a metaclass}$

Classes are objects too!
â€”  Every class X is the unique instance of its metaclass, called X class

+>file://figures/04-OrderedCollectionIsInstanceOfOrderedCollectionClass|width=120+





${slide:title=Metaclass are implicit}$

Metaclasses are automatically created when creating a class


${slide:title=Metaclasses in 7 Points}$


# Every object is an instance of a class
# Every class eventually inherits from ==Object==
# Every class is an instance of a metaclass
# ""The metaclass hierarchy parallels the class hierarchy""
# Every metaclass inherits from ==Class== and ==Behavior==
# Every metaclass is an instance of ==Metaclass==
# The metaclass of ==Metaclass== is an instance of ==Metaclass==



${slide:title=The metaclass hierarchy parallels the class hierarchy}$

image with parallel


${slide:title=Lookup}$

image avec browser + lookup


${slide:title=What about sending a message to a metaclass}$

image
previous plus send a message to a one 




${slide:title=Metaclasses in 7 Points}$

# Every object is an instance of a class
# Every class eventually inherits from ==Object==
# Every class is an instance of a metaclass
# The metaclass hierarchy parallels the class hierarchy
# ""Every metaclass inherits from ==Class== and ==Behavior==""
# Every metaclass is an instance of ==Metaclass==
# The metaclass of ==Metaclass== is an instance of ==Metaclass==


${slide:title=Every metaclass inherits from Class and Behavior}$

image  behavior and class

${slide:title=Where new is defined?}$

image  behavior and class  new added



${slide:title=Responsibilities of Behavior}$

==Behavior==
- Minimum state necessary for objects that have instances
- Basic interface to the compiler
- State:
-- class hierarchy link, method dictionary, description of instances (representation and number)
- Methods:
-- creating a method dictionary, compiling method
-- instance creation (new, basicNew, new:, basicNew:)
-- class hierarchy manipulation (superclass:, addSubclass:) 
-- accessing (selectors, allSelectors, compiledMethodAt: ) 
-- accessing instances and variables (allInstances, instVarNames) 
-- accessing class hierarchy (superclass, subclasses)
-- testing (hasMethods, includesSelector, canUnderstand:, inheritsFrom:, isVariable)


${slide:title=Responsibilities of ClassDescription}$

==ClassDescription==
-  adds a number of facilities to basic ==Behavior==:
--  named instance variables
--  category organization for methods
--  the notion of a name (abstract)
--  maintenance of Change sets and logging changes
--  most of the mechanisms needed for fileOut
-  ==ClassDescription== is an abstract class: its facilities are intended for inheritance by the two subclasses, ==Class== and ==Metaclass==

${slide:title=Responsibilities of Class}$

==Class==
- represents the common behavior of all classes
--  name, compilation, method storing, instance variables ...
-  representation for classVariable names and shared pool variables (addClassVarName:, addSharedPool:, initialize)



${slide:title=Metaclasses in 7 Points}$

# Every object is an instance of a class
# Every class eventually inherits from ==Object==
# Every class is an instance of a metaclass
# The metaclass hierarchy parallels the class hierarchy
# Every metaclass inherits from ==Class== and ==Behavior==
# ""Every metaclass is an instance of ==Metaclass==""
# The metaclass of ==Metaclass== is an instance of ==Metaclass==

${slide:title=Every metaclass is an instance of ==Metaclass==}$

image with Metaclass

${slide:title=Metaclass Responsibilities}$

==Metaclass==
-  Represents common metaclass ==Behavior==
-- instance creation (subclassOf:)
-- creating initialized instances of the metaclass's sole instance
-- initialization of class variables


${slide:title=Metaclasses in 7 Points}$

# Every object is an instance of a class
# Every class eventually inherits from ==Object==
# Every class is an instance of a metaclass
# The metaclass hierarchy parallels the class hierarchy
# Every metaclass inherits from ==Class== and ==Behavior==
# Every metaclass is an instance of ==Metaclass==
# ""The metaclass of ==Metaclass== is an instance of ==Metaclass==""

${slide:title=The metaclass of ==Metaclass== is an instance of ==Metaclass==}$

Full picture

${slide:title=Points}$

- The full graph is consistent
-- Any class can receive a message 
-- Only one message lookup
- No need 




${slide:title=Metaclasses in 7 Points}$

${columns}$

${column:width=40}$

Only one rule:

When a message is sent to an object, a method is searched starting from the class of the object and following the inheritance chain

${column:width=50}$

+>file://figures/LookupEssenceAny.png|width=130+

${endColumns}$


${slide:title=A Class is an Instance of Another Class}$

- A class ==X== is always the unique instance of another class ==X class==
-- The class of ==Node== is ==Node class==

+>file://figures/WorkstationMetaclassesWithInheritance.png|width=90+


${slide:title=Lookup of Class Methods is No Different}$

+>file://figures/WorkstationMetaclassesWithInheritanceWithLookup.png|width=130+

${slide:What you Should Know}$

-Classes are objects and can be sent messages
-The process is ""exactly"" the same as for other objects
-To know more: follow the lecture 'Understanding Metaclasses'

