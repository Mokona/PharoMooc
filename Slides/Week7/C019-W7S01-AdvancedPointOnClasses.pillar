{
	"title":"Advanced Points on Classes",
	"slidesid":"W7S01"
}

${slide:title=Roadmap}$

- Sharing state between instances of a class
- Classes initialization
- Classes' Instance Variables

${slide:title=Roadmap}$

- ""Sharing state between instances of a class""
- Classes initialization
- Classes' Instance Variables


${slide:title=Sharing State?}$

Sometimes one needs to share objects between instances of a class


- Use ""class variables"" (==classVariablesNames:==)

[[[
Object subclass: #Class
   instanceVariableNames: ''
   classVariableNames: 'SharedState'
   package: ''
]]]


${slide:title=Example: Color Class Definition}$

[[[
Object subclass: #Color
   instanceVariableNames: 'rgb cachedDepth cachedBitPattern alpha'
   classVariableNames: 'BlueShift CachedColormaps ColorRegistry ComponentMask ComponentMax GrayToIndexMap GreenShift HalfComponentMask IndexedColors MaskingMap RedShift'
   package: 'Graphics-Primitives'
]]]


${slide:title=Class Variables}$

- Shared among all the instances and instances of subclasses
- Start with an uppercase
- Accessible from instance and class methods

${slide:title=Class Variable Access}$

+>file://figures/ColorAndColorClass2.png|width=100+


${slide:title=Class Variable Access}$

+>file://figures/Color.png|width=95+

${slide:title=Roadmap}$

- Sharing state between instances of a class
- ""Classes initialization""
- Classes' Instance Variables


${slide:title=Remember}$

- Everything is an object
- An object is initialized at creation time
- Classes are objects too
- How/When classes are initialized?


${slide:title=Classes are initialized}$

A class is initialized 
- at load time after its methods are loaded/compiled
- or explicitly by the programmer

[[[
Color initialize
]]]

${slide:title=Color Initialization}$

[[[
Color class >> initialize
   "Externally, the red, green, and blue components of color are floats in the range [0.0..1.0]. Internally, they are represented as integers in the range [0..ComponentMask] packing into a small integer to save space and to allow fast hashing and equality testing."
   ComponentMask := 1023.
   HalfComponentMask := 512. "used to round up in integer calculations"
   ComponentMax := 1023.0. "used to normalize components"
   RedShift := 20.
   GreenShift := 10.
   BlueShift := 0.
   self initializeIndexedColors.
   self initializeColorRegistry.
   self initializeGrayToIndexMap.
]]]

${slide:title=Warning}$

- It is a bad practice to do a ==super initialize== in a class initialize method

- Because you may reinitialize (super) classes that should not be reinitialized


${slide:title=Roadmap}$

- Sharing state between instances of a class
- Classes initialization
- ""Classes' Instance Variables""

${slide:title=Class Instance Variables}$

Classes have instance variables like any object
- A class is an instance of a class (a metaclass) 
- A metaclass can have instance variables that define the state of a class

[[[
WebServer class
   instanceVariableNames: 'uniqueInstance'
]]]

${slide:title=Singleton Design Pattern}$

- Intent: Enforce that a class has only one instance
- Possible solution: Keep the created instance in a variable of the class


${slide:title=Singleton Design Pattern: Implementation 1}$

Keep the created instance in a ""class instance variable""

[[[
WebServer class
   instanceVariableNames: 'uniqueInstance'

WebServer class >> uniqueInstance
   ^ uniqueInstance 
         ifNil: [ uniqueInstance := self new ]
]]]

Consequences:
- Each subclass of ==WebServer== has its own singleton
- Each subclass has its own instance variable ""value"" for ==uniqueInstance==

${slide:title=Singleton Design Pattern: Implementation 2}$

Keep the created instance in a ""class variables""

[[[
Object subclass: #WebServer
   instanceVariableNames: ''
   classVariableNames: 'UniqueInstance'
   package: 'Web'
]]]

Consequences:
- Only one singleton for the complete class hierarchy
- Remember that class variables are shared


${slide:title=What You Should Know}$

- How to share objects between instances of a class?
-- use class variables
- How to initialize class?
-- use ==initialize== class methods
- How to add state to a class?
-- use class instance variables

% Local Variables:
% compile-command: "cd ../.. && ./compile.sh --to=Beamer Slides/Week7/C019-W7S01-AdvancedPointOnClasses.pillar"
% End:
